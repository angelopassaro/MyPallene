Warning : Terminal "MAIN" was declared but never used
Warning : *** Shift/Reduce conflict found in state #94
  between Statements ::= Stat (*) 
  and     Statements ::= Stat (*) SEMI Statements 
  under symbol SEMI
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #16
  between Var_decls ::= ID COLON TypeDenoter Var_init_value (*) 
  and     Var_decls ::= ID COLON TypeDenoter Var_init_value (*) SEMI Var_decls 
  under symbol SEMI
  Resolved in favor of shifting.

Warning : *** Shift/Reduce conflict found in state #132
  between Stat ::= IF Expr THEN Statements (*) 
  and     Stat ::= IF Expr THEN Statements (*) ELSE Statements END 
  under symbol ELSE
  Resolved in favor of shifting.

===== Terminals =====
[0]EOF [1]com.passaro.mypallene.error [2]FUNCTION [3]MAIN [4]END
[5]IF [6]THEN [7]ELSE [8]WHILE [9]DO 
[10]FOR [11]LOCAL [12]GLOBAL [13]READ [14]WRITE 
[15]RETURN [16]NOT [17]SHARP [18]ID [19]NIL 
[20]INT [21]BOOL [22]FLOAT [23]STRING [24]LPAR 
[25]RPAR [26]BLPAR [27]BRPAR [28]SLPAR [29]SRPAR 
[30]COMMA [31]SEMI [32]COLON [33]AND [34]OR 
[35]LT [36]LE [37]EQ [38]NE [39]GT 
[40]GE [41]ARROW [42]ASSIGN [43]NOP [44]PLUS 
[45]MINUS [46]TIMES [47]DIV [48]UMINUS [49]INT_CONST 
[50]FLOAT_CONST [51]STRING_CONST [52]TRUE [53]FALSE 

===== Non terminals =====
[0]Program [1]Global [2]Functions [3]Def_fun [4]Par_decls 
[5]Var_decls [6]Var_init_value [7]TypeDenoter [8]Types [9]Statements 
[10]Stat [11]Vars [12]Exprs [13]Expr 

===== Productions =====
[0] Program ::= Global Functions 
[1] $START ::= Program EOF 
[2] Global ::= GLOBAL Var_decls END 
[3] Global ::= 
[4] Functions ::= Def_fun Functions 
[5] Functions ::= Def_fun 
[6] Def_fun ::= FUNCTION ID LPAR Par_decls RPAR COLON TypeDenoter Statements END 
[7] Def_fun ::= FUNCTION ID LPAR RPAR COLON TypeDenoter Statements END 
[8] Par_decls ::= ID COLON TypeDenoter COMMA Par_decls 
[9] Par_decls ::= ID COLON TypeDenoter 
[10] Var_decls ::= ID COLON TypeDenoter Var_init_value SEMI Var_decls 
[11] Var_decls ::= ID COLON TypeDenoter Var_init_value 
[12] Var_init_value ::= ASSIGN Expr 
[13] Var_init_value ::= 
[14] TypeDenoter ::= NIL 
[15] TypeDenoter ::= INT 
[16] TypeDenoter ::= BOOL 
[17] TypeDenoter ::= FLOAT 
[18] TypeDenoter ::= STRING 
[19] TypeDenoter ::= BLPAR TypeDenoter BLPAR 
[20] TypeDenoter ::= LPAR Types RPAR ARROW TypeDenoter 
[21] TypeDenoter ::= LPAR RPAR ARROW TypeDenoter 
[22] Types ::= TypeDenoter COMMA Types 
[23] Types ::= TypeDenoter 
[24] Statements ::= Stat SEMI Statements 
[25] Statements ::= Stat 
[26] Stat ::= NOP 
[27] Stat ::= WHILE Expr DO Statements END 
[28] Stat ::= IF Expr THEN Statements ELSE Statements END 
[29] Stat ::= IF Expr THEN Statements 
[30] Stat ::= FOR ID ASSIGN Expr COMMA Expr DO Statements END 
[31] Stat ::= LOCAL Var_decls SEMI Statements END 
[32] Stat ::= ID ASSIGN Expr 
[33] Stat ::= Expr SLPAR Expr SRPAR ASSIGN Expr 
[34] Stat ::= ID LPAR Exprs RPAR 
[35] Stat ::= Vars READ 
[36] Stat ::= Exprs WRITE 
[37] Stat ::= RETURN Expr 
[38] Stat ::= com.passaro.mypallene.error
[39] Vars ::= ID COMMA Vars 
[40] Vars ::= ID 
[41] Exprs ::= Expr COMMA Exprs 
[42] Exprs ::= Expr 
[43] Expr ::= NIL 
[44] Expr ::= TRUE 
[45] Expr ::= FALSE 
[46] Expr ::= INT_CONST 
[47] Expr ::= FLOAT_CONST 
[48] Expr ::= STRING_CONST 
[49] Expr ::= BLPAR BRPAR COLON TypeDenoter 
[50] Expr ::= ID 
[51] Expr ::= Expr SLPAR Expr SRPAR 
[52] Expr ::= ID LPAR Exprs RPAR 
[53] Expr ::= Expr PLUS Expr 
[54] Expr ::= Expr MINUS Expr 
[55] Expr ::= Expr TIMES Expr 
[56] Expr ::= Expr DIV Expr 
[57] Expr ::= Expr AND Expr 
[58] Expr ::= Expr OR Expr 
[59] Expr ::= Expr GT Expr 
[60] Expr ::= Expr GE Expr 
[61] Expr ::= Expr LT Expr 
[62] Expr ::= Expr LE Expr 
[63] Expr ::= Expr EQ Expr 
[64] Expr ::= Expr NE Expr 
[65] Expr ::= MINUS Expr 
[66] Expr ::= NOT Expr 
[67] Expr ::= SHARP Expr 
[68] Expr ::= com.passaro.mypallene.error

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [Global ::= (*) GLOBAL Var_decls END , {FUNCTION }]
  [$START ::= (*) Program EOF , {EOF }]
  [Global ::= (*) , {FUNCTION }]
  [Program ::= (*) Global Functions , {EOF }]
}
transition on GLOBAL to state [3]
transition on Global to state [2]
transition on Program to state [1]

-------------------
lalr_state [1]: {
  [$START ::= Program (*) EOF , {EOF }]
}
transition on EOF to state [158]

-------------------
lalr_state [2]: {
  [Functions ::= (*) Def_fun , {EOF }]
  [Def_fun ::= (*) FUNCTION ID LPAR RPAR COLON TypeDenoter Statements END , {EOF FUNCTION }]
  [Functions ::= (*) Def_fun Functions , {EOF }]
  [Def_fun ::= (*) FUNCTION ID LPAR Par_decls RPAR COLON TypeDenoter Statements END , {EOF FUNCTION }]
  [Program ::= Global (*) Functions , {EOF }]
}
transition on FUNCTION to state [86]
transition on Functions to state [85]
transition on Def_fun to state [84]

-------------------
lalr_state [3]: {
  [Global ::= GLOBAL (*) Var_decls END , {FUNCTION }]
  [Var_decls ::= (*) ID COLON TypeDenoter Var_init_value SEMI Var_decls , {END }]
  [Var_decls ::= (*) ID COLON TypeDenoter Var_init_value , {END }]
}
transition on Var_decls to state [5]
transition on ID to state [4]

-------------------
lalr_state [4]: {
  [Var_decls ::= ID (*) COLON TypeDenoter Var_init_value SEMI Var_decls , {END SEMI }]
  [Var_decls ::= ID (*) COLON TypeDenoter Var_init_value , {END SEMI }]
}
transition on COLON to state [7]

-------------------
lalr_state [5]: {
  [Global ::= GLOBAL Var_decls (*) END , {FUNCTION }]
}
transition on END to state [6]

-------------------
lalr_state [6]: {
  [Global ::= GLOBAL Var_decls END (*) , {FUNCTION }]
}

-------------------
lalr_state [7]: {
  [TypeDenoter ::= (*) LPAR Types RPAR ARROW TypeDenoter , {END SEMI ASSIGN }]
  [TypeDenoter ::= (*) FLOAT , {END SEMI ASSIGN }]
  [Var_decls ::= ID COLON (*) TypeDenoter Var_init_value , {END SEMI }]
  [TypeDenoter ::= (*) NIL , {END SEMI ASSIGN }]
  [TypeDenoter ::= (*) BLPAR TypeDenoter BLPAR , {END SEMI ASSIGN }]
  [Var_decls ::= ID COLON (*) TypeDenoter Var_init_value SEMI Var_decls , {END SEMI }]
  [TypeDenoter ::= (*) BOOL , {END SEMI ASSIGN }]
  [TypeDenoter ::= (*) LPAR RPAR ARROW TypeDenoter , {END SEMI ASSIGN }]
  [TypeDenoter ::= (*) STRING , {END SEMI ASSIGN }]
  [TypeDenoter ::= (*) INT , {END SEMI ASSIGN }]
}
transition on NIL to state [15]
transition on INT to state [14]
transition on FLOAT to state [13]
transition on TypeDenoter to state [12]
transition on BOOL to state [11]
transition on LPAR to state [10]
transition on BLPAR to state [9]
transition on STRING to state [8]

-------------------
lalr_state [8]: {
  [TypeDenoter ::= STRING (*) , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
}

-------------------
lalr_state [9]: {
  [TypeDenoter ::= (*) LPAR Types RPAR ARROW TypeDenoter , {BLPAR }]
  [TypeDenoter ::= (*) FLOAT , {BLPAR }]
  [TypeDenoter ::= (*) NIL , {BLPAR }]
  [TypeDenoter ::= BLPAR (*) TypeDenoter BLPAR , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) BLPAR TypeDenoter BLPAR , {BLPAR }]
  [TypeDenoter ::= (*) BOOL , {BLPAR }]
  [TypeDenoter ::= (*) LPAR RPAR ARROW TypeDenoter , {BLPAR }]
  [TypeDenoter ::= (*) STRING , {BLPAR }]
  [TypeDenoter ::= (*) INT , {BLPAR }]
}
transition on NIL to state [15]
transition on INT to state [14]
transition on FLOAT to state [13]
transition on TypeDenoter to state [82]
transition on BOOL to state [11]
transition on LPAR to state [10]
transition on BLPAR to state [9]
transition on STRING to state [8]

-------------------
lalr_state [10]: {
  [TypeDenoter ::= (*) LPAR Types RPAR ARROW TypeDenoter , {RPAR COMMA }]
  [TypeDenoter ::= (*) FLOAT , {RPAR COMMA }]
  [TypeDenoter ::= (*) NIL , {RPAR COMMA }]
  [Types ::= (*) TypeDenoter COMMA Types , {RPAR }]
  [TypeDenoter ::= (*) BLPAR TypeDenoter BLPAR , {RPAR COMMA }]
  [TypeDenoter ::= (*) BOOL , {RPAR COMMA }]
  [TypeDenoter ::= LPAR (*) RPAR ARROW TypeDenoter , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) LPAR RPAR ARROW TypeDenoter , {RPAR COMMA }]
  [TypeDenoter ::= (*) STRING , {RPAR COMMA }]
  [TypeDenoter ::= (*) INT , {RPAR COMMA }]
  [TypeDenoter ::= LPAR (*) Types RPAR ARROW TypeDenoter , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [Types ::= (*) TypeDenoter , {RPAR }]
}
transition on FLOAT to state [13]
transition on RPAR to state [74]
transition on BLPAR to state [9]
transition on STRING to state [8]
transition on TypeDenoter to state [73]
transition on LPAR to state [10]
transition on Types to state [72]
transition on NIL to state [15]
transition on BOOL to state [11]
transition on INT to state [14]

-------------------
lalr_state [11]: {
  [TypeDenoter ::= BOOL (*) , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
}

-------------------
lalr_state [12]: {
  [Var_decls ::= ID COLON TypeDenoter (*) Var_init_value SEMI Var_decls , {END SEMI }]
  [Var_init_value ::= (*) , {END SEMI }]
  [Var_init_value ::= (*) ASSIGN Expr , {END SEMI }]
  [Var_decls ::= ID COLON TypeDenoter (*) Var_init_value , {END SEMI }]
}
transition on ASSIGN to state [17]
transition on Var_init_value to state [16]

-------------------
lalr_state [13]: {
  [TypeDenoter ::= FLOAT (*) , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
}

-------------------
lalr_state [14]: {
  [TypeDenoter ::= INT (*) , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
}

-------------------
lalr_state [15]: {
  [TypeDenoter ::= NIL (*) , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
}

-------------------
lalr_state [16]: {
  [Var_decls ::= ID COLON TypeDenoter Var_init_value (*) , {END SEMI }]
  [Var_decls ::= ID COLON TypeDenoter Var_init_value (*) SEMI Var_decls , {END SEMI }]
}
transition on SEMI to state [70]

-------------------
lalr_state [17]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Var_init_value ::= ASSIGN (*) Expr , {END SEMI }]
  [Expr ::= (*) Expr MINUS Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [22]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [18]: {
  [Expr ::= FLOAT_CONST (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}

-------------------
lalr_state [19]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= MINUS (*) Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [69]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [20]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= SHARP (*) Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [68]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [21]: {
  [Expr ::= INT_CONST (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}

-------------------
lalr_state [22]: {
  [Expr ::= Expr (*) EQ Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LE Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Var_init_value ::= ASSIGN Expr (*) , {END SEMI }]
  [Expr ::= Expr (*) LT Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {END SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [23]: {
  [Expr ::= NIL (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}

-------------------
lalr_state [24]: {
  [Expr ::= TRUE (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}

-------------------
lalr_state [25]: {
  [Expr ::= STRING_CONST (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}

-------------------
lalr_state [26]: {
  [Expr ::= FALSE (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}

-------------------
lalr_state [27]: {
  [Expr ::= BLPAR (*) BRPAR COLON TypeDenoter , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on BRPAR to state [65]

-------------------
lalr_state [28]: {
  [Expr ::= ID (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= ID (*) LPAR Exprs RPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on LPAR to state [59]

-------------------
lalr_state [29]: {
  [Expr ::= com.passaro.mypallene.error (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}

-------------------
lalr_state [30]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= NOT (*) Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [31]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [31]: {
  [Expr ::= Expr (*) EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= NOT Expr (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [32]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr MINUS (*) Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [58]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [33]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr AND (*) Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [57]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [34]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr SLPAR (*) Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [55]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [35]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr GE (*) Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [54]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [36]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr PLUS (*) Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [53]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [37]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr EQ (*) Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [52]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [38]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr LE (*) Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [51]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [39]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr DIV (*) Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [50]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [40]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr GT (*) Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [49]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [41]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr TIMES (*) Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [48]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [42]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr NE (*) Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [47]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [43]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr LT (*) Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [46]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [44]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr OR (*) Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [45]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [45]: {
  [Expr ::= Expr (*) EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr OR Expr (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [46]: {
  [Expr ::= Expr (*) EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr LT Expr (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [47]: {
  [Expr ::= Expr (*) EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr NE Expr (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [48]: {
  [Expr ::= Expr (*) EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr TIMES Expr (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [49]: {
  [Expr ::= Expr (*) EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr GT Expr (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [50]: {
  [Expr ::= Expr (*) EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr DIV Expr (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [51]: {
  [Expr ::= Expr (*) EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr LE Expr (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [52]: {
  [Expr ::= Expr (*) EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr EQ Expr (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [53]: {
  [Expr ::= Expr (*) EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr PLUS Expr (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [54]: {
  [Expr ::= Expr (*) EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr GE Expr (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [55]: {
  [Expr ::= Expr (*) EQ Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr SLPAR Expr (*) SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LE Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on SRPAR to state [56]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [56]: {
  [Expr ::= Expr SLPAR Expr SRPAR (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}

-------------------
lalr_state [57]: {
  [Expr ::= Expr AND Expr (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [58]: {
  [Expr ::= Expr (*) EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr MINUS Expr (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [59]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= (*) Expr COMMA Exprs , {RPAR }]
  [Expr ::= (*) INT_CONST , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= ID LPAR (*) Exprs RPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= (*) Expr , {RPAR }]
  [Expr ::= (*) FLOAT_CONST , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on Exprs to state [61]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [60]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [60]: {
  [Expr ::= Expr (*) EQ Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= Expr (*) , {WRITE RPAR }]
  [Expr ::= Expr (*) LE Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= Expr (*) COMMA Exprs , {WRITE RPAR }]
  [Expr ::= Expr (*) LT Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on COMMA to state [63]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [61]: {
  [Expr ::= ID LPAR Exprs (*) RPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on RPAR to state [62]

-------------------
lalr_state [62]: {
  [Expr ::= ID LPAR Exprs RPAR (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}

-------------------
lalr_state [63]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= Expr COMMA (*) Exprs , {WRITE RPAR }]
  [Exprs ::= (*) Expr COMMA Exprs , {WRITE RPAR }]
  [Expr ::= (*) INT_CONST , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= (*) Expr , {WRITE RPAR }]
  [Expr ::= (*) FLOAT_CONST , {WRITE RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on Exprs to state [64]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [60]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [64]: {
  [Exprs ::= Expr COMMA Exprs (*) , {WRITE RPAR }]
}

-------------------
lalr_state [65]: {
  [Expr ::= BLPAR BRPAR (*) COLON TypeDenoter , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on COLON to state [66]

-------------------
lalr_state [66]: {
  [TypeDenoter ::= (*) LPAR Types RPAR ARROW TypeDenoter , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [TypeDenoter ::= (*) FLOAT , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [TypeDenoter ::= (*) NIL , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [TypeDenoter ::= (*) BLPAR TypeDenoter BLPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [TypeDenoter ::= (*) BOOL , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [TypeDenoter ::= (*) LPAR RPAR ARROW TypeDenoter , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [TypeDenoter ::= (*) STRING , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [TypeDenoter ::= (*) INT , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= BLPAR BRPAR COLON (*) TypeDenoter , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NIL to state [15]
transition on INT to state [14]
transition on FLOAT to state [13]
transition on TypeDenoter to state [67]
transition on BOOL to state [11]
transition on LPAR to state [10]
transition on BLPAR to state [9]
transition on STRING to state [8]

-------------------
lalr_state [67]: {
  [Expr ::= BLPAR BRPAR COLON TypeDenoter (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}

-------------------
lalr_state [68]: {
  [Expr ::= Expr (*) EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= SHARP Expr (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [69]: {
  [Expr ::= Expr (*) EQ Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= MINUS Expr (*) , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {END THEN ELSE DO WRITE RPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [70]: {
  [Var_decls ::= (*) ID COLON TypeDenoter Var_init_value SEMI Var_decls , {END SEMI }]
  [Var_decls ::= ID COLON TypeDenoter Var_init_value SEMI (*) Var_decls , {END SEMI }]
  [Var_decls ::= (*) ID COLON TypeDenoter Var_init_value , {END SEMI }]
}
transition on Var_decls to state [71]
transition on ID to state [4]

-------------------
lalr_state [71]: {
  [Var_decls ::= ID COLON TypeDenoter Var_init_value SEMI Var_decls (*) , {END SEMI }]
}

-------------------
lalr_state [72]: {
  [TypeDenoter ::= LPAR Types (*) RPAR ARROW TypeDenoter , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
}
transition on RPAR to state [79]

-------------------
lalr_state [73]: {
  [Types ::= TypeDenoter (*) , {RPAR }]
  [Types ::= TypeDenoter (*) COMMA Types , {RPAR }]
}
transition on COMMA to state [77]

-------------------
lalr_state [74]: {
  [TypeDenoter ::= LPAR RPAR (*) ARROW TypeDenoter , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
}
transition on ARROW to state [75]

-------------------
lalr_state [75]: {
  [TypeDenoter ::= (*) LPAR Types RPAR ARROW TypeDenoter , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) FLOAT , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) NIL , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) BLPAR TypeDenoter BLPAR , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) BOOL , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= LPAR RPAR ARROW (*) TypeDenoter , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) LPAR RPAR ARROW TypeDenoter , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) STRING , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) INT , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
}
transition on NIL to state [15]
transition on INT to state [14]
transition on FLOAT to state [13]
transition on TypeDenoter to state [76]
transition on BOOL to state [11]
transition on LPAR to state [10]
transition on BLPAR to state [9]
transition on STRING to state [8]

-------------------
lalr_state [76]: {
  [TypeDenoter ::= LPAR RPAR ARROW TypeDenoter (*) , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
}

-------------------
lalr_state [77]: {
  [TypeDenoter ::= (*) LPAR Types RPAR ARROW TypeDenoter , {RPAR COMMA }]
  [TypeDenoter ::= (*) FLOAT , {RPAR COMMA }]
  [TypeDenoter ::= (*) NIL , {RPAR COMMA }]
  [Types ::= TypeDenoter COMMA (*) Types , {RPAR }]
  [Types ::= (*) TypeDenoter COMMA Types , {RPAR }]
  [TypeDenoter ::= (*) BLPAR TypeDenoter BLPAR , {RPAR COMMA }]
  [TypeDenoter ::= (*) BOOL , {RPAR COMMA }]
  [TypeDenoter ::= (*) LPAR RPAR ARROW TypeDenoter , {RPAR COMMA }]
  [TypeDenoter ::= (*) STRING , {RPAR COMMA }]
  [TypeDenoter ::= (*) INT , {RPAR COMMA }]
  [Types ::= (*) TypeDenoter , {RPAR }]
}
transition on FLOAT to state [13]
transition on BLPAR to state [9]
transition on STRING to state [8]
transition on TypeDenoter to state [73]
transition on LPAR to state [10]
transition on Types to state [78]
transition on NIL to state [15]
transition on BOOL to state [11]
transition on INT to state [14]

-------------------
lalr_state [78]: {
  [Types ::= TypeDenoter COMMA Types (*) , {RPAR }]
}

-------------------
lalr_state [79]: {
  [TypeDenoter ::= LPAR Types RPAR (*) ARROW TypeDenoter , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
}
transition on ARROW to state [80]

-------------------
lalr_state [80]: {
  [TypeDenoter ::= (*) LPAR Types RPAR ARROW TypeDenoter , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) FLOAT , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) NIL , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) BLPAR TypeDenoter BLPAR , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) BOOL , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) LPAR RPAR ARROW TypeDenoter , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) STRING , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) INT , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= LPAR Types RPAR ARROW (*) TypeDenoter , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
}
transition on NIL to state [15]
transition on INT to state [14]
transition on FLOAT to state [13]
transition on TypeDenoter to state [81]
transition on BOOL to state [11]
transition on LPAR to state [10]
transition on BLPAR to state [9]
transition on STRING to state [8]

-------------------
lalr_state [81]: {
  [TypeDenoter ::= LPAR Types RPAR ARROW TypeDenoter (*) , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
}

-------------------
lalr_state [82]: {
  [TypeDenoter ::= BLPAR TypeDenoter (*) BLPAR , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
}
transition on BLPAR to state [83]

-------------------
lalr_state [83]: {
  [TypeDenoter ::= BLPAR TypeDenoter BLPAR (*) , {com.passaro.mypallene.error END IF THEN ELSE WHILE DO FOR LOCAL WRITE RETURN NOT SHARP ID NIL RPAR BLPAR SLPAR SRPAR COMMA SEMI AND OR LT LE EQ NE GT GE ASSIGN NOP PLUS MINUS TIMES DIV INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
}

-------------------
lalr_state [84]: {
  [Functions ::= Def_fun (*) , {EOF }]
  [Functions ::= (*) Def_fun , {EOF }]
  [Def_fun ::= (*) FUNCTION ID LPAR RPAR COLON TypeDenoter Statements END , {EOF FUNCTION }]
  [Functions ::= Def_fun (*) Functions , {EOF }]
  [Functions ::= (*) Def_fun Functions , {EOF }]
  [Def_fun ::= (*) FUNCTION ID LPAR Par_decls RPAR COLON TypeDenoter Statements END , {EOF FUNCTION }]
}
transition on FUNCTION to state [86]
transition on Functions to state [157]
transition on Def_fun to state [84]

-------------------
lalr_state [85]: {
  [Program ::= Global Functions (*) , {EOF }]
}

-------------------
lalr_state [86]: {
  [Def_fun ::= FUNCTION (*) ID LPAR RPAR COLON TypeDenoter Statements END , {EOF FUNCTION }]
  [Def_fun ::= FUNCTION (*) ID LPAR Par_decls RPAR COLON TypeDenoter Statements END , {EOF FUNCTION }]
}
transition on ID to state [87]

-------------------
lalr_state [87]: {
  [Def_fun ::= FUNCTION ID (*) LPAR RPAR COLON TypeDenoter Statements END , {EOF FUNCTION }]
  [Def_fun ::= FUNCTION ID (*) LPAR Par_decls RPAR COLON TypeDenoter Statements END , {EOF FUNCTION }]
}
transition on LPAR to state [88]

-------------------
lalr_state [88]: {
  [Par_decls ::= (*) ID COLON TypeDenoter COMMA Par_decls , {RPAR }]
  [Def_fun ::= FUNCTION ID LPAR (*) RPAR COLON TypeDenoter Statements END , {EOF FUNCTION }]
  [Def_fun ::= FUNCTION ID LPAR (*) Par_decls RPAR COLON TypeDenoter Statements END , {EOF FUNCTION }]
  [Par_decls ::= (*) ID COLON TypeDenoter , {RPAR }]
}
transition on RPAR to state [91]
transition on Par_decls to state [90]
transition on ID to state [89]

-------------------
lalr_state [89]: {
  [Par_decls ::= ID (*) COLON TypeDenoter , {RPAR }]
  [Par_decls ::= ID (*) COLON TypeDenoter COMMA Par_decls , {RPAR }]
}
transition on COLON to state [153]

-------------------
lalr_state [90]: {
  [Def_fun ::= FUNCTION ID LPAR Par_decls (*) RPAR COLON TypeDenoter Statements END , {EOF FUNCTION }]
}
transition on RPAR to state [148]

-------------------
lalr_state [91]: {
  [Def_fun ::= FUNCTION ID LPAR RPAR (*) COLON TypeDenoter Statements END , {EOF FUNCTION }]
}
transition on COLON to state [92]

-------------------
lalr_state [92]: {
  [TypeDenoter ::= (*) LPAR Types RPAR ARROW TypeDenoter , {com.passaro.mypallene.error IF WHILE FOR LOCAL RETURN NOT SHARP ID NIL BLPAR NOP MINUS INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) FLOAT , {com.passaro.mypallene.error IF WHILE FOR LOCAL RETURN NOT SHARP ID NIL BLPAR NOP MINUS INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) NIL , {com.passaro.mypallene.error IF WHILE FOR LOCAL RETURN NOT SHARP ID NIL BLPAR NOP MINUS INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [Def_fun ::= FUNCTION ID LPAR RPAR COLON (*) TypeDenoter Statements END , {EOF FUNCTION }]
  [TypeDenoter ::= (*) BLPAR TypeDenoter BLPAR , {com.passaro.mypallene.error IF WHILE FOR LOCAL RETURN NOT SHARP ID NIL BLPAR NOP MINUS INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) BOOL , {com.passaro.mypallene.error IF WHILE FOR LOCAL RETURN NOT SHARP ID NIL BLPAR NOP MINUS INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) LPAR RPAR ARROW TypeDenoter , {com.passaro.mypallene.error IF WHILE FOR LOCAL RETURN NOT SHARP ID NIL BLPAR NOP MINUS INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) STRING , {com.passaro.mypallene.error IF WHILE FOR LOCAL RETURN NOT SHARP ID NIL BLPAR NOP MINUS INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) INT , {com.passaro.mypallene.error IF WHILE FOR LOCAL RETURN NOT SHARP ID NIL BLPAR NOP MINUS INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
}
transition on NIL to state [15]
transition on INT to state [14]
transition on FLOAT to state [13]
transition on TypeDenoter to state [93]
transition on BOOL to state [11]
transition on LPAR to state [10]
transition on BLPAR to state [9]
transition on STRING to state [8]

-------------------
lalr_state [93]: {
  [Expr ::= (*) com.passaro.mypallene.error , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= (*) Expr COMMA Exprs , {WRITE }]
  [Stat ::= (*) ID ASSIGN Expr , {END SEMI }]
  [Expr ::= (*) Expr NE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) RETURN Expr , {END SEMI }]
  [Stat ::= (*) IF Expr THEN Statements ELSE Statements END , {END SEMI }]
  [Expr ::= (*) Expr GE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= (*) Expr , {WRITE }]
  [Stat ::= (*) Expr SLPAR Expr SRPAR ASSIGN Expr , {END SEMI }]
  [Statements ::= (*) Stat SEMI Statements , {END }]
  [Expr ::= (*) MINUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) com.passaro.mypallene.error , {END SEMI }]
  [Stat ::= (*) IF Expr THEN Statements , {END SEMI }]
  [Def_fun ::= FUNCTION ID LPAR RPAR COLON TypeDenoter (*) Statements END , {EOF FUNCTION }]
  [Expr ::= (*) Expr LT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID LPAR Exprs RPAR , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) ID LPAR Exprs RPAR , {END SEMI }]
  [Statements ::= (*) Stat , {END }]
  [Expr ::= (*) NOT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Vars ::= (*) ID COMMA Vars , {READ }]
  [Stat ::= (*) FOR ID ASSIGN Expr COMMA Expr DO Statements END , {END SEMI }]
  [Expr ::= (*) Expr LE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) Vars READ , {END SEMI }]
  [Stat ::= (*) NOP , {END SEMI }]
  [Expr ::= (*) SHARP Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Vars ::= (*) ID , {READ }]
  [Stat ::= (*) LOCAL Var_decls SEMI Statements END , {END SEMI }]
  [Expr ::= (*) Expr EQ Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) Exprs WRITE , {END SEMI }]
  [Stat ::= (*) WHILE Expr DO Statements END , {END SEMI }]
}
transition on FOR to state [106]
transition on Vars to state [105]
transition on Exprs to state [104]
transition on FLOAT_CONST to state [18]
transition on com.passaro.mypallene.error to state [103]
transition on MINUS to state [19]
transition on FALSE to state [26]
transition on BLPAR to state [27]
transition on INT_CONST to state [21]
transition on ID to state [102]
transition on NIL to state [23]
transition on Expr to state [101]
transition on IF to state [100]
transition on TRUE to state [24]
transition on NOP to state [99]
transition on RETURN to state [98]
transition on Statements to state [97]
transition on NOT to state [30]
transition on LOCAL to state [96]
transition on WHILE to state [95]
transition on SHARP to state [20]
transition on Stat to state [94]
transition on STRING_CONST to state [25]

-------------------
lalr_state [94]: {
  [Statements ::= Stat (*) SEMI Statements , {END ELSE SEMI }]
  [Statements ::= Stat (*) , {END ELSE SEMI }]
}
transition on SEMI to state [146]

-------------------
lalr_state [95]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= WHILE (*) Expr DO Statements END , {END ELSE SEMI }]
  [Expr ::= (*) FLOAT_CONST , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [142]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [96]: {
  [Var_decls ::= (*) ID COLON TypeDenoter Var_init_value SEMI Var_decls , {SEMI }]
  [Stat ::= LOCAL (*) Var_decls SEMI Statements END , {END ELSE SEMI }]
  [Var_decls ::= (*) ID COLON TypeDenoter Var_init_value , {SEMI }]
}
transition on Var_decls to state [138]
transition on ID to state [4]

-------------------
lalr_state [97]: {
  [Def_fun ::= FUNCTION ID LPAR RPAR COLON TypeDenoter Statements (*) END , {EOF FUNCTION }]
}
transition on END to state [137]

-------------------
lalr_state [98]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= RETURN (*) Expr , {END ELSE SEMI }]
  [Expr ::= (*) FLOAT_CONST , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [136]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [99]: {
  [Stat ::= NOP (*) , {END ELSE SEMI }]
}

-------------------
lalr_state [100]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= IF (*) Expr THEN Statements ELSE Statements END , {END ELSE SEMI }]
  [Expr ::= (*) NIL , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= IF (*) Expr THEN Statements , {END ELSE SEMI }]
  [Expr ::= (*) TRUE , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [130]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [101]: {
  [Expr ::= Expr (*) EQ Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= Expr (*) , {WRITE }]
  [Expr ::= Expr (*) LE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= Expr (*) SLPAR Expr SRPAR ASSIGN Expr , {END ELSE SEMI }]
  [Expr ::= Expr (*) PLUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= Expr (*) COMMA Exprs , {WRITE }]
  [Expr ::= Expr (*) NE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on COMMA to state [63]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [125]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [102]: {
  [Stat ::= ID (*) ASSIGN Expr , {END ELSE SEMI }]
  [Vars ::= ID (*) , {READ }]
  [Stat ::= ID (*) LPAR Exprs RPAR , {END ELSE SEMI }]
  [Vars ::= ID (*) COMMA Vars , {READ }]
  [Expr ::= ID (*) , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= ID (*) LPAR Exprs RPAR , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on ASSIGN to state [119]
transition on LPAR to state [118]
transition on COMMA to state [117]

-------------------
lalr_state [103]: {
  [Stat ::= com.passaro.mypallene.error (*) , {END ELSE SEMI }]
  [Expr ::= com.passaro.mypallene.error (*) , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}

-------------------
lalr_state [104]: {
  [Stat ::= Exprs (*) WRITE , {END ELSE SEMI }]
}
transition on WRITE to state [116]

-------------------
lalr_state [105]: {
  [Stat ::= Vars (*) READ , {END ELSE SEMI }]
}
transition on READ to state [115]

-------------------
lalr_state [106]: {
  [Stat ::= FOR (*) ID ASSIGN Expr COMMA Expr DO Statements END , {END ELSE SEMI }]
}
transition on ID to state [107]

-------------------
lalr_state [107]: {
  [Stat ::= FOR ID (*) ASSIGN Expr COMMA Expr DO Statements END , {END ELSE SEMI }]
}
transition on ASSIGN to state [108]

-------------------
lalr_state [108]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= FOR ID ASSIGN (*) Expr COMMA Expr DO Statements END , {END ELSE SEMI }]
  [Expr ::= (*) SHARP Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [109]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [109]: {
  [Expr ::= Expr (*) EQ Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= FOR ID ASSIGN Expr (*) COMMA Expr DO Statements END , {END ELSE SEMI }]
  [Expr ::= Expr (*) LE Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on COMMA to state [110]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [110]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= FOR ID ASSIGN Expr COMMA (*) Expr DO Statements END , {END ELSE SEMI }]
  [Expr ::= (*) Expr AND Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [111]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [111]: {
  [Expr ::= Expr (*) EQ Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= FOR ID ASSIGN Expr COMMA Expr (*) DO Statements END , {END ELSE SEMI }]
  [Expr ::= Expr (*) LE Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on DO to state [112]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [112]: {
  [Expr ::= (*) com.passaro.mypallene.error , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= (*) Expr COMMA Exprs , {WRITE }]
  [Stat ::= (*) ID ASSIGN Expr , {END SEMI }]
  [Expr ::= (*) Expr NE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) RETURN Expr , {END SEMI }]
  [Stat ::= (*) IF Expr THEN Statements ELSE Statements END , {END SEMI }]
  [Expr ::= (*) Expr GE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= (*) Expr , {WRITE }]
  [Stat ::= (*) Expr SLPAR Expr SRPAR ASSIGN Expr , {END SEMI }]
  [Statements ::= (*) Stat SEMI Statements , {END }]
  [Expr ::= (*) MINUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) com.passaro.mypallene.error , {END SEMI }]
  [Stat ::= (*) IF Expr THEN Statements , {END SEMI }]
  [Expr ::= (*) Expr LT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID LPAR Exprs RPAR , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) ID LPAR Exprs RPAR , {END SEMI }]
  [Statements ::= (*) Stat , {END }]
  [Stat ::= FOR ID ASSIGN Expr COMMA Expr DO (*) Statements END , {END ELSE SEMI }]
  [Expr ::= (*) NOT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Vars ::= (*) ID COMMA Vars , {READ }]
  [Stat ::= (*) FOR ID ASSIGN Expr COMMA Expr DO Statements END , {END SEMI }]
  [Expr ::= (*) Expr LE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) Vars READ , {END SEMI }]
  [Stat ::= (*) NOP , {END SEMI }]
  [Expr ::= (*) SHARP Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Vars ::= (*) ID , {READ }]
  [Stat ::= (*) LOCAL Var_decls SEMI Statements END , {END SEMI }]
  [Expr ::= (*) Expr EQ Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) Exprs WRITE , {END SEMI }]
  [Stat ::= (*) WHILE Expr DO Statements END , {END SEMI }]
}
transition on FOR to state [106]
transition on Vars to state [105]
transition on Exprs to state [104]
transition on FLOAT_CONST to state [18]
transition on com.passaro.mypallene.error to state [103]
transition on MINUS to state [19]
transition on FALSE to state [26]
transition on BLPAR to state [27]
transition on INT_CONST to state [21]
transition on ID to state [102]
transition on NIL to state [23]
transition on Expr to state [101]
transition on IF to state [100]
transition on TRUE to state [24]
transition on NOP to state [99]
transition on RETURN to state [98]
transition on Statements to state [113]
transition on NOT to state [30]
transition on LOCAL to state [96]
transition on WHILE to state [95]
transition on SHARP to state [20]
transition on Stat to state [94]
transition on STRING_CONST to state [25]

-------------------
lalr_state [113]: {
  [Stat ::= FOR ID ASSIGN Expr COMMA Expr DO Statements (*) END , {END ELSE SEMI }]
}
transition on END to state [114]

-------------------
lalr_state [114]: {
  [Stat ::= FOR ID ASSIGN Expr COMMA Expr DO Statements END (*) , {END ELSE SEMI }]
}

-------------------
lalr_state [115]: {
  [Stat ::= Vars READ (*) , {END ELSE SEMI }]
}

-------------------
lalr_state [116]: {
  [Stat ::= Exprs WRITE (*) , {END ELSE SEMI }]
}

-------------------
lalr_state [117]: {
  [Vars ::= (*) ID , {READ }]
  [Vars ::= ID COMMA (*) Vars , {READ }]
  [Vars ::= (*) ID COMMA Vars , {READ }]
}
transition on Vars to state [124]
transition on ID to state [123]

-------------------
lalr_state [118]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= (*) Expr COMMA Exprs , {RPAR }]
  [Expr ::= (*) INT_CONST , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= ID LPAR (*) Exprs RPAR , {END ELSE SEMI }]
  [Expr ::= (*) TRUE , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= ID LPAR (*) Exprs RPAR , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= (*) Expr , {RPAR }]
  [Expr ::= (*) FLOAT_CONST , {RPAR SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on Exprs to state [121]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [60]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [119]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= ID ASSIGN (*) Expr , {END ELSE SEMI }]
  [Expr ::= (*) FLOAT_CONST , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [120]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [120]: {
  [Expr ::= Expr (*) EQ Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LE Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= ID ASSIGN Expr (*) , {END ELSE SEMI }]
  [Expr ::= Expr (*) LT Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [121]: {
  [Stat ::= ID LPAR Exprs (*) RPAR , {END ELSE SEMI }]
  [Expr ::= ID LPAR Exprs (*) RPAR , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on RPAR to state [122]

-------------------
lalr_state [122]: {
  [Stat ::= ID LPAR Exprs RPAR (*) , {END ELSE SEMI }]
  [Expr ::= ID LPAR Exprs RPAR (*) , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}

-------------------
lalr_state [123]: {
  [Vars ::= ID (*) , {READ }]
  [Vars ::= ID (*) COMMA Vars , {READ }]
}
transition on COMMA to state [117]

-------------------
lalr_state [124]: {
  [Vars ::= ID COMMA Vars (*) , {READ }]
}

-------------------
lalr_state [125]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GE Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= Expr SLPAR (*) Expr SRPAR ASSIGN Expr , {END ELSE SEMI }]
  [Expr ::= (*) NIL , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr SLPAR (*) Expr SRPAR , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [126]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [126]: {
  [Expr ::= Expr (*) EQ Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr SLPAR Expr (*) SRPAR , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= Expr SLPAR Expr (*) SRPAR ASSIGN Expr , {END ELSE SEMI }]
  [Expr ::= Expr (*) LE Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {SLPAR SRPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on SRPAR to state [127]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [127]: {
  [Expr ::= Expr SLPAR Expr SRPAR (*) , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= Expr SLPAR Expr SRPAR (*) ASSIGN Expr , {END ELSE SEMI }]
}
transition on ASSIGN to state [128]

-------------------
lalr_state [128]: {
  [Expr ::= (*) ID LPAR Exprs RPAR , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LE Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) SHARP Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= Expr SLPAR Expr SRPAR ASSIGN (*) Expr , {END ELSE SEMI }]
  [Expr ::= (*) Expr GE Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) MINUS Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr EQ Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) com.passaro.mypallene.error , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr LT Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NOT Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr NE Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on NOT to state [30]
transition on com.passaro.mypallene.error to state [29]
transition on ID to state [28]
transition on BLPAR to state [27]
transition on FALSE to state [26]
transition on STRING_CONST to state [25]
transition on TRUE to state [24]
transition on NIL to state [23]
transition on Expr to state [129]
transition on INT_CONST to state [21]
transition on SHARP to state [20]
transition on MINUS to state [19]
transition on FLOAT_CONST to state [18]

-------------------
lalr_state [129]: {
  [Expr ::= Expr (*) EQ Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= Expr SLPAR Expr SRPAR ASSIGN Expr (*) , {END ELSE SEMI }]
  [Expr ::= Expr (*) LE Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [130]: {
  [Expr ::= Expr (*) EQ Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= IF Expr (*) THEN Statements ELSE Statements END , {END ELSE SEMI }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LE Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= IF Expr (*) THEN Statements , {END ELSE SEMI }]
  [Expr ::= Expr (*) TIMES Expr , {THEN SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on THEN to state [131]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [131]: {
  [Expr ::= (*) com.passaro.mypallene.error , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= (*) Expr COMMA Exprs , {WRITE }]
  [Stat ::= (*) ID ASSIGN Expr , {END ELSE SEMI }]
  [Expr ::= (*) Expr NE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= IF Expr THEN (*) Statements ELSE Statements END , {END ELSE SEMI }]
  [Expr ::= (*) INT_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) RETURN Expr , {END ELSE SEMI }]
  [Stat ::= (*) IF Expr THEN Statements ELSE Statements END , {END ELSE SEMI }]
  [Expr ::= (*) Expr GE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= (*) Expr , {WRITE }]
  [Stat ::= (*) Expr SLPAR Expr SRPAR ASSIGN Expr , {END ELSE SEMI }]
  [Statements ::= (*) Stat SEMI Statements , {END ELSE SEMI }]
  [Expr ::= (*) MINUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= IF Expr THEN (*) Statements , {END ELSE SEMI }]
  [Expr ::= (*) Expr DIV Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) com.passaro.mypallene.error , {END ELSE SEMI }]
  [Stat ::= (*) IF Expr THEN Statements , {END ELSE SEMI }]
  [Expr ::= (*) Expr LT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID LPAR Exprs RPAR , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) ID LPAR Exprs RPAR , {END ELSE SEMI }]
  [Statements ::= (*) Stat , {END ELSE SEMI }]
  [Expr ::= (*) NOT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Vars ::= (*) ID COMMA Vars , {READ }]
  [Stat ::= (*) FOR ID ASSIGN Expr COMMA Expr DO Statements END , {END ELSE SEMI }]
  [Expr ::= (*) Expr LE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) Vars READ , {END ELSE SEMI }]
  [Stat ::= (*) NOP , {END ELSE SEMI }]
  [Expr ::= (*) SHARP Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Vars ::= (*) ID , {READ }]
  [Stat ::= (*) LOCAL Var_decls SEMI Statements END , {END ELSE SEMI }]
  [Expr ::= (*) Expr EQ Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) Exprs WRITE , {END ELSE SEMI }]
  [Stat ::= (*) WHILE Expr DO Statements END , {END ELSE SEMI }]
}
transition on FOR to state [106]
transition on Vars to state [105]
transition on Exprs to state [104]
transition on FLOAT_CONST to state [18]
transition on com.passaro.mypallene.error to state [103]
transition on MINUS to state [19]
transition on FALSE to state [26]
transition on BLPAR to state [27]
transition on INT_CONST to state [21]
transition on ID to state [102]
transition on NIL to state [23]
transition on Expr to state [101]
transition on IF to state [100]
transition on TRUE to state [24]
transition on NOP to state [99]
transition on RETURN to state [98]
transition on Statements to state [132]
transition on NOT to state [30]
transition on LOCAL to state [96]
transition on WHILE to state [95]
transition on SHARP to state [20]
transition on Stat to state [94]
transition on STRING_CONST to state [25]

-------------------
lalr_state [132]: {
  [Stat ::= IF Expr THEN Statements (*) , {END ELSE SEMI }]
  [Stat ::= IF Expr THEN Statements (*) ELSE Statements END , {END ELSE SEMI }]
}
transition on ELSE to state [133]

-------------------
lalr_state [133]: {
  [Expr ::= (*) com.passaro.mypallene.error , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= (*) Expr COMMA Exprs , {WRITE }]
  [Stat ::= (*) ID ASSIGN Expr , {END SEMI }]
  [Stat ::= IF Expr THEN Statements ELSE (*) Statements END , {END ELSE SEMI }]
  [Expr ::= (*) Expr NE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) RETURN Expr , {END SEMI }]
  [Stat ::= (*) IF Expr THEN Statements ELSE Statements END , {END SEMI }]
  [Expr ::= (*) Expr GE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= (*) Expr , {WRITE }]
  [Stat ::= (*) Expr SLPAR Expr SRPAR ASSIGN Expr , {END SEMI }]
  [Statements ::= (*) Stat SEMI Statements , {END }]
  [Expr ::= (*) MINUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) com.passaro.mypallene.error , {END SEMI }]
  [Stat ::= (*) IF Expr THEN Statements , {END SEMI }]
  [Expr ::= (*) Expr LT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID LPAR Exprs RPAR , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) ID LPAR Exprs RPAR , {END SEMI }]
  [Statements ::= (*) Stat , {END }]
  [Expr ::= (*) NOT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Vars ::= (*) ID COMMA Vars , {READ }]
  [Stat ::= (*) FOR ID ASSIGN Expr COMMA Expr DO Statements END , {END SEMI }]
  [Expr ::= (*) Expr LE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) Vars READ , {END SEMI }]
  [Stat ::= (*) NOP , {END SEMI }]
  [Expr ::= (*) SHARP Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Vars ::= (*) ID , {READ }]
  [Stat ::= (*) LOCAL Var_decls SEMI Statements END , {END SEMI }]
  [Expr ::= (*) Expr EQ Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) Exprs WRITE , {END SEMI }]
  [Stat ::= (*) WHILE Expr DO Statements END , {END SEMI }]
}
transition on FOR to state [106]
transition on Vars to state [105]
transition on Exprs to state [104]
transition on FLOAT_CONST to state [18]
transition on com.passaro.mypallene.error to state [103]
transition on MINUS to state [19]
transition on FALSE to state [26]
transition on BLPAR to state [27]
transition on INT_CONST to state [21]
transition on ID to state [102]
transition on NIL to state [23]
transition on Expr to state [101]
transition on IF to state [100]
transition on TRUE to state [24]
transition on NOP to state [99]
transition on RETURN to state [98]
transition on Statements to state [134]
transition on NOT to state [30]
transition on LOCAL to state [96]
transition on WHILE to state [95]
transition on SHARP to state [20]
transition on Stat to state [94]
transition on STRING_CONST to state [25]

-------------------
lalr_state [134]: {
  [Stat ::= IF Expr THEN Statements ELSE Statements (*) END , {END ELSE SEMI }]
}
transition on END to state [135]

-------------------
lalr_state [135]: {
  [Stat ::= IF Expr THEN Statements ELSE Statements END (*) , {END ELSE SEMI }]
}

-------------------
lalr_state [136]: {
  [Stat ::= RETURN Expr (*) , {END ELSE SEMI }]
  [Expr ::= Expr (*) EQ Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LE Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) PLUS Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {END ELSE SLPAR SEMI AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [137]: {
  [Def_fun ::= FUNCTION ID LPAR RPAR COLON TypeDenoter Statements END (*) , {EOF FUNCTION }]
}

-------------------
lalr_state [138]: {
  [Stat ::= LOCAL Var_decls (*) SEMI Statements END , {END ELSE SEMI }]
}
transition on SEMI to state [139]

-------------------
lalr_state [139]: {
  [Expr ::= (*) com.passaro.mypallene.error , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= (*) Expr COMMA Exprs , {WRITE }]
  [Stat ::= (*) ID ASSIGN Expr , {END SEMI }]
  [Expr ::= (*) Expr NE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) RETURN Expr , {END SEMI }]
  [Stat ::= (*) IF Expr THEN Statements ELSE Statements END , {END SEMI }]
  [Expr ::= (*) Expr GE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= (*) Expr , {WRITE }]
  [Stat ::= (*) Expr SLPAR Expr SRPAR ASSIGN Expr , {END SEMI }]
  [Statements ::= (*) Stat SEMI Statements , {END }]
  [Expr ::= (*) MINUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) com.passaro.mypallene.error , {END SEMI }]
  [Stat ::= (*) IF Expr THEN Statements , {END SEMI }]
  [Expr ::= (*) Expr LT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID LPAR Exprs RPAR , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) ID LPAR Exprs RPAR , {END SEMI }]
  [Statements ::= (*) Stat , {END }]
  [Expr ::= (*) NOT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Vars ::= (*) ID COMMA Vars , {READ }]
  [Stat ::= (*) FOR ID ASSIGN Expr COMMA Expr DO Statements END , {END SEMI }]
  [Expr ::= (*) Expr LE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) Vars READ , {END SEMI }]
  [Stat ::= (*) NOP , {END SEMI }]
  [Expr ::= (*) SHARP Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= LOCAL Var_decls SEMI (*) Statements END , {END ELSE SEMI }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Vars ::= (*) ID , {READ }]
  [Stat ::= (*) LOCAL Var_decls SEMI Statements END , {END SEMI }]
  [Expr ::= (*) Expr EQ Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) Exprs WRITE , {END SEMI }]
  [Stat ::= (*) WHILE Expr DO Statements END , {END SEMI }]
}
transition on FOR to state [106]
transition on Vars to state [105]
transition on Exprs to state [104]
transition on FLOAT_CONST to state [18]
transition on com.passaro.mypallene.error to state [103]
transition on MINUS to state [19]
transition on FALSE to state [26]
transition on BLPAR to state [27]
transition on INT_CONST to state [21]
transition on ID to state [102]
transition on NIL to state [23]
transition on Expr to state [101]
transition on IF to state [100]
transition on TRUE to state [24]
transition on NOP to state [99]
transition on RETURN to state [98]
transition on NOT to state [30]
transition on Statements to state [140]
transition on LOCAL to state [96]
transition on WHILE to state [95]
transition on SHARP to state [20]
transition on Stat to state [94]
transition on STRING_CONST to state [25]

-------------------
lalr_state [140]: {
  [Stat ::= LOCAL Var_decls SEMI Statements (*) END , {END ELSE SEMI }]
}
transition on END to state [141]

-------------------
lalr_state [141]: {
  [Stat ::= LOCAL Var_decls SEMI Statements END (*) , {END ELSE SEMI }]
}

-------------------
lalr_state [142]: {
  [Expr ::= Expr (*) EQ Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GE Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) AND Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) MINUS Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) SLPAR Expr SRPAR , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LE Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) GT Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) DIV Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= WHILE Expr (*) DO Statements END , {END ELSE SEMI }]
  [Expr ::= Expr (*) PLUS Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) NE Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) LT Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) OR Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= Expr (*) TIMES Expr , {DO SLPAR AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
}
transition on OR to state [44]
transition on DO to state [143]
transition on LT to state [43]
transition on NE to state [42]
transition on TIMES to state [41]
transition on GT to state [40]
transition on DIV to state [39]
transition on LE to state [38]
transition on EQ to state [37]
transition on PLUS to state [36]
transition on GE to state [35]
transition on SLPAR to state [34]
transition on AND to state [33]
transition on MINUS to state [32]

-------------------
lalr_state [143]: {
  [Expr ::= (*) com.passaro.mypallene.error , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= (*) Expr COMMA Exprs , {WRITE }]
  [Stat ::= (*) ID ASSIGN Expr , {END SEMI }]
  [Expr ::= (*) Expr NE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) RETURN Expr , {END SEMI }]
  [Stat ::= (*) IF Expr THEN Statements ELSE Statements END , {END SEMI }]
  [Expr ::= (*) Expr GE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= (*) Expr , {WRITE }]
  [Stat ::= (*) Expr SLPAR Expr SRPAR ASSIGN Expr , {END SEMI }]
  [Statements ::= (*) Stat SEMI Statements , {END }]
  [Expr ::= (*) MINUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) com.passaro.mypallene.error , {END SEMI }]
  [Stat ::= (*) IF Expr THEN Statements , {END SEMI }]
  [Expr ::= (*) Expr LT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID LPAR Exprs RPAR , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) ID LPAR Exprs RPAR , {END SEMI }]
  [Statements ::= (*) Stat , {END }]
  [Expr ::= (*) NOT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Vars ::= (*) ID COMMA Vars , {READ }]
  [Stat ::= (*) FOR ID ASSIGN Expr COMMA Expr DO Statements END , {END SEMI }]
  [Expr ::= (*) Expr LE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) Vars READ , {END SEMI }]
  [Stat ::= (*) NOP , {END SEMI }]
  [Expr ::= (*) SHARP Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Vars ::= (*) ID , {READ }]
  [Stat ::= (*) LOCAL Var_decls SEMI Statements END , {END SEMI }]
  [Expr ::= (*) Expr EQ Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= WHILE Expr DO (*) Statements END , {END ELSE SEMI }]
  [Expr ::= (*) Expr MINUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) Exprs WRITE , {END SEMI }]
  [Stat ::= (*) WHILE Expr DO Statements END , {END SEMI }]
}
transition on FOR to state [106]
transition on Vars to state [105]
transition on Exprs to state [104]
transition on FLOAT_CONST to state [18]
transition on com.passaro.mypallene.error to state [103]
transition on MINUS to state [19]
transition on FALSE to state [26]
transition on BLPAR to state [27]
transition on INT_CONST to state [21]
transition on ID to state [102]
transition on NIL to state [23]
transition on Expr to state [101]
transition on IF to state [100]
transition on TRUE to state [24]
transition on NOP to state [99]
transition on RETURN to state [98]
transition on NOT to state [30]
transition on Statements to state [144]
transition on LOCAL to state [96]
transition on WHILE to state [95]
transition on SHARP to state [20]
transition on Stat to state [94]
transition on STRING_CONST to state [25]

-------------------
lalr_state [144]: {
  [Stat ::= WHILE Expr DO Statements (*) END , {END ELSE SEMI }]
}
transition on END to state [145]

-------------------
lalr_state [145]: {
  [Stat ::= WHILE Expr DO Statements END (*) , {END ELSE SEMI }]
}

-------------------
lalr_state [146]: {
  [Expr ::= (*) com.passaro.mypallene.error , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= (*) Expr COMMA Exprs , {WRITE }]
  [Stat ::= (*) ID ASSIGN Expr , {END ELSE SEMI }]
  [Expr ::= (*) Expr NE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) RETURN Expr , {END ELSE SEMI }]
  [Stat ::= (*) IF Expr THEN Statements ELSE Statements END , {END ELSE SEMI }]
  [Expr ::= (*) Expr GE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= (*) Expr , {WRITE }]
  [Statements ::= Stat SEMI (*) Statements , {END ELSE SEMI }]
  [Stat ::= (*) Expr SLPAR Expr SRPAR ASSIGN Expr , {END ELSE SEMI }]
  [Statements ::= (*) Stat SEMI Statements , {END ELSE SEMI }]
  [Expr ::= (*) MINUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) com.passaro.mypallene.error , {END ELSE SEMI }]
  [Stat ::= (*) IF Expr THEN Statements , {END ELSE SEMI }]
  [Expr ::= (*) Expr LT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID LPAR Exprs RPAR , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) ID LPAR Exprs RPAR , {END ELSE SEMI }]
  [Statements ::= (*) Stat , {END ELSE SEMI }]
  [Expr ::= (*) NOT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Vars ::= (*) ID COMMA Vars , {READ }]
  [Stat ::= (*) FOR ID ASSIGN Expr COMMA Expr DO Statements END , {END ELSE SEMI }]
  [Expr ::= (*) Expr LE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) Vars READ , {END ELSE SEMI }]
  [Stat ::= (*) NOP , {END ELSE SEMI }]
  [Expr ::= (*) SHARP Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Vars ::= (*) ID , {READ }]
  [Stat ::= (*) LOCAL Var_decls SEMI Statements END , {END ELSE SEMI }]
  [Expr ::= (*) Expr EQ Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) Exprs WRITE , {END ELSE SEMI }]
  [Stat ::= (*) WHILE Expr DO Statements END , {END ELSE SEMI }]
}
transition on FOR to state [106]
transition on Vars to state [105]
transition on Exprs to state [104]
transition on FLOAT_CONST to state [18]
transition on com.passaro.mypallene.error to state [103]
transition on MINUS to state [19]
transition on FALSE to state [26]
transition on BLPAR to state [27]
transition on INT_CONST to state [21]
transition on ID to state [102]
transition on NIL to state [23]
transition on Expr to state [101]
transition on IF to state [100]
transition on TRUE to state [24]
transition on NOP to state [99]
transition on RETURN to state [98]
transition on Statements to state [147]
transition on NOT to state [30]
transition on LOCAL to state [96]
transition on WHILE to state [95]
transition on SHARP to state [20]
transition on Stat to state [94]
transition on STRING_CONST to state [25]

-------------------
lalr_state [147]: {
  [Statements ::= Stat SEMI Statements (*) , {END ELSE SEMI }]
}

-------------------
lalr_state [148]: {
  [Def_fun ::= FUNCTION ID LPAR Par_decls RPAR (*) COLON TypeDenoter Statements END , {EOF FUNCTION }]
}
transition on COLON to state [149]

-------------------
lalr_state [149]: {
  [TypeDenoter ::= (*) LPAR Types RPAR ARROW TypeDenoter , {com.passaro.mypallene.error IF WHILE FOR LOCAL RETURN NOT SHARP ID NIL BLPAR NOP MINUS INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) FLOAT , {com.passaro.mypallene.error IF WHILE FOR LOCAL RETURN NOT SHARP ID NIL BLPAR NOP MINUS INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) NIL , {com.passaro.mypallene.error IF WHILE FOR LOCAL RETURN NOT SHARP ID NIL BLPAR NOP MINUS INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) BLPAR TypeDenoter BLPAR , {com.passaro.mypallene.error IF WHILE FOR LOCAL RETURN NOT SHARP ID NIL BLPAR NOP MINUS INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) BOOL , {com.passaro.mypallene.error IF WHILE FOR LOCAL RETURN NOT SHARP ID NIL BLPAR NOP MINUS INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [Def_fun ::= FUNCTION ID LPAR Par_decls RPAR COLON (*) TypeDenoter Statements END , {EOF FUNCTION }]
  [TypeDenoter ::= (*) LPAR RPAR ARROW TypeDenoter , {com.passaro.mypallene.error IF WHILE FOR LOCAL RETURN NOT SHARP ID NIL BLPAR NOP MINUS INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) STRING , {com.passaro.mypallene.error IF WHILE FOR LOCAL RETURN NOT SHARP ID NIL BLPAR NOP MINUS INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
  [TypeDenoter ::= (*) INT , {com.passaro.mypallene.error IF WHILE FOR LOCAL RETURN NOT SHARP ID NIL BLPAR NOP MINUS INT_CONST FLOAT_CONST STRING_CONST TRUE FALSE }]
}
transition on NIL to state [15]
transition on INT to state [14]
transition on FLOAT to state [13]
transition on TypeDenoter to state [150]
transition on BOOL to state [11]
transition on LPAR to state [10]
transition on BLPAR to state [9]
transition on STRING to state [8]

-------------------
lalr_state [150]: {
  [Expr ::= (*) com.passaro.mypallene.error , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr GT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= (*) Expr COMMA Exprs , {WRITE }]
  [Stat ::= (*) ID ASSIGN Expr , {END SEMI }]
  [Expr ::= (*) Expr NE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr TIMES Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) INT_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) RETURN Expr , {END SEMI }]
  [Stat ::= (*) IF Expr THEN Statements ELSE Statements END , {END SEMI }]
  [Def_fun ::= FUNCTION ID LPAR Par_decls RPAR COLON TypeDenoter (*) Statements END , {EOF FUNCTION }]
  [Expr ::= (*) Expr GE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr SLPAR Expr SRPAR , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Exprs ::= (*) Expr , {WRITE }]
  [Stat ::= (*) Expr SLPAR Expr SRPAR ASSIGN Expr , {END SEMI }]
  [Statements ::= (*) Stat SEMI Statements , {END }]
  [Expr ::= (*) MINUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr DIV Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FLOAT_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) com.passaro.mypallene.error , {END SEMI }]
  [Stat ::= (*) IF Expr THEN Statements , {END SEMI }]
  [Expr ::= (*) Expr LT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) ID LPAR Exprs RPAR , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) NIL , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) ID LPAR Exprs RPAR , {END SEMI }]
  [Statements ::= (*) Stat , {END }]
  [Expr ::= (*) NOT Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr AND Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) STRING_CONST , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Vars ::= (*) ID COMMA Vars , {READ }]
  [Stat ::= (*) FOR ID ASSIGN Expr COMMA Expr DO Statements END , {END SEMI }]
  [Expr ::= (*) Expr LE Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr PLUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) TRUE , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) Vars READ , {END SEMI }]
  [Stat ::= (*) NOP , {END SEMI }]
  [Expr ::= (*) SHARP Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr OR Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) BLPAR BRPAR COLON TypeDenoter , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Vars ::= (*) ID , {READ }]
  [Stat ::= (*) LOCAL Var_decls SEMI Statements END , {END SEMI }]
  [Expr ::= (*) Expr EQ Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) Expr MINUS Expr , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Expr ::= (*) FALSE , {WRITE SLPAR COMMA AND OR LT LE EQ NE GT GE PLUS MINUS TIMES DIV }]
  [Stat ::= (*) Exprs WRITE , {END SEMI }]
  [Stat ::= (*) WHILE Expr DO Statements END , {END SEMI }]
}
transition on FOR to state [106]
transition on Vars to state [105]
transition on Exprs to state [104]
transition on FLOAT_CONST to state [18]
transition on com.passaro.mypallene.error to state [103]
transition on MINUS to state [19]
transition on FALSE to state [26]
transition on BLPAR to state [27]
transition on INT_CONST to state [21]
transition on ID to state [102]
transition on NIL to state [23]
transition on Expr to state [101]
transition on IF to state [100]
transition on TRUE to state [24]
transition on NOP to state [99]
transition on RETURN to state [98]
transition on Statements to state [151]
transition on NOT to state [30]
transition on LOCAL to state [96]
transition on WHILE to state [95]
transition on SHARP to state [20]
transition on Stat to state [94]
transition on STRING_CONST to state [25]

-------------------
lalr_state [151]: {
  [Def_fun ::= FUNCTION ID LPAR Par_decls RPAR COLON TypeDenoter Statements (*) END , {EOF FUNCTION }]
}
transition on END to state [152]

-------------------
lalr_state [152]: {
  [Def_fun ::= FUNCTION ID LPAR Par_decls RPAR COLON TypeDenoter Statements END (*) , {EOF FUNCTION }]
}

-------------------
lalr_state [153]: {
  [TypeDenoter ::= (*) LPAR Types RPAR ARROW TypeDenoter , {RPAR COMMA }]
  [TypeDenoter ::= (*) FLOAT , {RPAR COMMA }]
  [Par_decls ::= ID COLON (*) TypeDenoter COMMA Par_decls , {RPAR }]
  [TypeDenoter ::= (*) NIL , {RPAR COMMA }]
  [TypeDenoter ::= (*) BLPAR TypeDenoter BLPAR , {RPAR COMMA }]
  [TypeDenoter ::= (*) BOOL , {RPAR COMMA }]
  [TypeDenoter ::= (*) LPAR RPAR ARROW TypeDenoter , {RPAR COMMA }]
  [TypeDenoter ::= (*) STRING , {RPAR COMMA }]
  [Par_decls ::= ID COLON (*) TypeDenoter , {RPAR }]
  [TypeDenoter ::= (*) INT , {RPAR COMMA }]
}
transition on NIL to state [15]
transition on INT to state [14]
transition on FLOAT to state [13]
transition on TypeDenoter to state [154]
transition on BOOL to state [11]
transition on LPAR to state [10]
transition on BLPAR to state [9]
transition on STRING to state [8]

-------------------
lalr_state [154]: {
  [Par_decls ::= ID COLON TypeDenoter (*) , {RPAR }]
  [Par_decls ::= ID COLON TypeDenoter (*) COMMA Par_decls , {RPAR }]
}
transition on COMMA to state [155]

-------------------
lalr_state [155]: {
  [Par_decls ::= (*) ID COLON TypeDenoter COMMA Par_decls , {RPAR }]
  [Par_decls ::= (*) ID COLON TypeDenoter , {RPAR }]
  [Par_decls ::= ID COLON TypeDenoter COMMA (*) Par_decls , {RPAR }]
}
transition on Par_decls to state [156]
transition on ID to state [89]

-------------------
lalr_state [156]: {
  [Par_decls ::= ID COLON TypeDenoter COMMA Par_decls (*) , {RPAR }]
}

-------------------
lalr_state [157]: {
  [Functions ::= Def_fun Functions (*) , {EOF }]
}

-------------------
lalr_state [158]: {
  [$START ::= Program EOF (*) , {EOF }]
}

-------------------
-------- ACTION_TABLE --------
From state #0
 [term 2:REDUCE(with prod 3)] [term 12:SHIFT(to state 3)]
From state #1
 [term 0:SHIFT(to state 158)]
From state #2
 [term 2:SHIFT(to state 86)]
From state #3
 [term 18:SHIFT(to state 4)]
From state #4
 [term 32:SHIFT(to state 7)]
From state #5
 [term 4:SHIFT(to state 6)]
From state #6
 [term 2:REDUCE(with prod 2)]
From state #7
 [term 19:SHIFT(to state 15)] [term 20:SHIFT(to state 14)]
 [term 21:SHIFT(to state 11)] [term 22:SHIFT(to state 13)]
 [term 23:SHIFT(to state 8)] [term 24:SHIFT(to state 10)]
 [term 26:SHIFT(to state 9)]
From state #8
 [term 1:REDUCE(with prod 18)] [term 4:REDUCE(with prod 18)]
 [term 5:REDUCE(with prod 18)] [term 6:REDUCE(with prod 18)]
 [term 7:REDUCE(with prod 18)] [term 8:REDUCE(with prod 18)]
 [term 9:REDUCE(with prod 18)] [term 10:REDUCE(with prod 18)]
 [term 11:REDUCE(with prod 18)] [term 14:REDUCE(with prod 18)]
 [term 15:REDUCE(with prod 18)] [term 16:REDUCE(with prod 18)]
 [term 17:REDUCE(with prod 18)] [term 18:REDUCE(with prod 18)]
 [term 19:REDUCE(with prod 18)] [term 25:REDUCE(with prod 18)]
 [term 26:REDUCE(with prod 18)] [term 28:REDUCE(with prod 18)]
 [term 29:REDUCE(with prod 18)] [term 30:REDUCE(with prod 18)]
 [term 31:REDUCE(with prod 18)] [term 33:REDUCE(with prod 18)]
 [term 34:REDUCE(with prod 18)] [term 35:REDUCE(with prod 18)]
 [term 36:REDUCE(with prod 18)] [term 37:REDUCE(with prod 18)]
 [term 38:REDUCE(with prod 18)] [term 39:REDUCE(with prod 18)]
 [term 40:REDUCE(with prod 18)] [term 42:REDUCE(with prod 18)]
 [term 43:REDUCE(with prod 18)] [term 44:REDUCE(with prod 18)]
 [term 45:REDUCE(with prod 18)] [term 46:REDUCE(with prod 18)]
 [term 47:REDUCE(with prod 18)] [term 49:REDUCE(with prod 18)]
 [term 50:REDUCE(with prod 18)] [term 51:REDUCE(with prod 18)]
 [term 52:REDUCE(with prod 18)] [term 53:REDUCE(with prod 18)]
From state #9
 [term 19:SHIFT(to state 15)] [term 20:SHIFT(to state 14)]
 [term 21:SHIFT(to state 11)] [term 22:SHIFT(to state 13)]
 [term 23:SHIFT(to state 8)] [term 24:SHIFT(to state 10)]
 [term 26:SHIFT(to state 9)]
From state #10
 [term 19:SHIFT(to state 15)] [term 20:SHIFT(to state 14)]
 [term 21:SHIFT(to state 11)] [term 22:SHIFT(to state 13)]
 [term 23:SHIFT(to state 8)] [term 24:SHIFT(to state 10)]
 [term 25:SHIFT(to state 74)] [term 26:SHIFT(to state 9)]
From state #11
 [term 1:REDUCE(with prod 16)] [term 4:REDUCE(with prod 16)]
 [term 5:REDUCE(with prod 16)] [term 6:REDUCE(with prod 16)]
 [term 7:REDUCE(with prod 16)] [term 8:REDUCE(with prod 16)]
 [term 9:REDUCE(with prod 16)] [term 10:REDUCE(with prod 16)]
 [term 11:REDUCE(with prod 16)] [term 14:REDUCE(with prod 16)]
 [term 15:REDUCE(with prod 16)] [term 16:REDUCE(with prod 16)]
 [term 17:REDUCE(with prod 16)] [term 18:REDUCE(with prod 16)]
 [term 19:REDUCE(with prod 16)] [term 25:REDUCE(with prod 16)]
 [term 26:REDUCE(with prod 16)] [term 28:REDUCE(with prod 16)]
 [term 29:REDUCE(with prod 16)] [term 30:REDUCE(with prod 16)]
 [term 31:REDUCE(with prod 16)] [term 33:REDUCE(with prod 16)]
 [term 34:REDUCE(with prod 16)] [term 35:REDUCE(with prod 16)]
 [term 36:REDUCE(with prod 16)] [term 37:REDUCE(with prod 16)]
 [term 38:REDUCE(with prod 16)] [term 39:REDUCE(with prod 16)]
 [term 40:REDUCE(with prod 16)] [term 42:REDUCE(with prod 16)]
 [term 43:REDUCE(with prod 16)] [term 44:REDUCE(with prod 16)]
 [term 45:REDUCE(with prod 16)] [term 46:REDUCE(with prod 16)]
 [term 47:REDUCE(with prod 16)] [term 49:REDUCE(with prod 16)]
 [term 50:REDUCE(with prod 16)] [term 51:REDUCE(with prod 16)]
 [term 52:REDUCE(with prod 16)] [term 53:REDUCE(with prod 16)]
From state #12
 [term 4:REDUCE(with prod 13)] [term 31:REDUCE(with prod 13)]
 [term 42:SHIFT(to state 17)]
From state #13
 [term 1:REDUCE(with prod 17)] [term 4:REDUCE(with prod 17)]
 [term 5:REDUCE(with prod 17)] [term 6:REDUCE(with prod 17)]
 [term 7:REDUCE(with prod 17)] [term 8:REDUCE(with prod 17)]
 [term 9:REDUCE(with prod 17)] [term 10:REDUCE(with prod 17)]
 [term 11:REDUCE(with prod 17)] [term 14:REDUCE(with prod 17)]
 [term 15:REDUCE(with prod 17)] [term 16:REDUCE(with prod 17)]
 [term 17:REDUCE(with prod 17)] [term 18:REDUCE(with prod 17)]
 [term 19:REDUCE(with prod 17)] [term 25:REDUCE(with prod 17)]
 [term 26:REDUCE(with prod 17)] [term 28:REDUCE(with prod 17)]
 [term 29:REDUCE(with prod 17)] [term 30:REDUCE(with prod 17)]
 [term 31:REDUCE(with prod 17)] [term 33:REDUCE(with prod 17)]
 [term 34:REDUCE(with prod 17)] [term 35:REDUCE(with prod 17)]
 [term 36:REDUCE(with prod 17)] [term 37:REDUCE(with prod 17)]
 [term 38:REDUCE(with prod 17)] [term 39:REDUCE(with prod 17)]
 [term 40:REDUCE(with prod 17)] [term 42:REDUCE(with prod 17)]
 [term 43:REDUCE(with prod 17)] [term 44:REDUCE(with prod 17)]
 [term 45:REDUCE(with prod 17)] [term 46:REDUCE(with prod 17)]
 [term 47:REDUCE(with prod 17)] [term 49:REDUCE(with prod 17)]
 [term 50:REDUCE(with prod 17)] [term 51:REDUCE(with prod 17)]
 [term 52:REDUCE(with prod 17)] [term 53:REDUCE(with prod 17)]
From state #14
 [term 1:REDUCE(with prod 15)] [term 4:REDUCE(with prod 15)]
 [term 5:REDUCE(with prod 15)] [term 6:REDUCE(with prod 15)]
 [term 7:REDUCE(with prod 15)] [term 8:REDUCE(with prod 15)]
 [term 9:REDUCE(with prod 15)] [term 10:REDUCE(with prod 15)]
 [term 11:REDUCE(with prod 15)] [term 14:REDUCE(with prod 15)]
 [term 15:REDUCE(with prod 15)] [term 16:REDUCE(with prod 15)]
 [term 17:REDUCE(with prod 15)] [term 18:REDUCE(with prod 15)]
 [term 19:REDUCE(with prod 15)] [term 25:REDUCE(with prod 15)]
 [term 26:REDUCE(with prod 15)] [term 28:REDUCE(with prod 15)]
 [term 29:REDUCE(with prod 15)] [term 30:REDUCE(with prod 15)]
 [term 31:REDUCE(with prod 15)] [term 33:REDUCE(with prod 15)]
 [term 34:REDUCE(with prod 15)] [term 35:REDUCE(with prod 15)]
 [term 36:REDUCE(with prod 15)] [term 37:REDUCE(with prod 15)]
 [term 38:REDUCE(with prod 15)] [term 39:REDUCE(with prod 15)]
 [term 40:REDUCE(with prod 15)] [term 42:REDUCE(with prod 15)]
 [term 43:REDUCE(with prod 15)] [term 44:REDUCE(with prod 15)]
 [term 45:REDUCE(with prod 15)] [term 46:REDUCE(with prod 15)]
 [term 47:REDUCE(with prod 15)] [term 49:REDUCE(with prod 15)]
 [term 50:REDUCE(with prod 15)] [term 51:REDUCE(with prod 15)]
 [term 52:REDUCE(with prod 15)] [term 53:REDUCE(with prod 15)]
From state #15
 [term 1:REDUCE(with prod 14)] [term 4:REDUCE(with prod 14)]
 [term 5:REDUCE(with prod 14)] [term 6:REDUCE(with prod 14)]
 [term 7:REDUCE(with prod 14)] [term 8:REDUCE(with prod 14)]
 [term 9:REDUCE(with prod 14)] [term 10:REDUCE(with prod 14)]
 [term 11:REDUCE(with prod 14)] [term 14:REDUCE(with prod 14)]
 [term 15:REDUCE(with prod 14)] [term 16:REDUCE(with prod 14)]
 [term 17:REDUCE(with prod 14)] [term 18:REDUCE(with prod 14)]
 [term 19:REDUCE(with prod 14)] [term 25:REDUCE(with prod 14)]
 [term 26:REDUCE(with prod 14)] [term 28:REDUCE(with prod 14)]
 [term 29:REDUCE(with prod 14)] [term 30:REDUCE(with prod 14)]
 [term 31:REDUCE(with prod 14)] [term 33:REDUCE(with prod 14)]
 [term 34:REDUCE(with prod 14)] [term 35:REDUCE(with prod 14)]
 [term 36:REDUCE(with prod 14)] [term 37:REDUCE(with prod 14)]
 [term 38:REDUCE(with prod 14)] [term 39:REDUCE(with prod 14)]
 [term 40:REDUCE(with prod 14)] [term 42:REDUCE(with prod 14)]
 [term 43:REDUCE(with prod 14)] [term 44:REDUCE(with prod 14)]
 [term 45:REDUCE(with prod 14)] [term 46:REDUCE(with prod 14)]
 [term 47:REDUCE(with prod 14)] [term 49:REDUCE(with prod 14)]
 [term 50:REDUCE(with prod 14)] [term 51:REDUCE(with prod 14)]
 [term 52:REDUCE(with prod 14)] [term 53:REDUCE(with prod 14)]
From state #16
 [term 4:REDUCE(with prod 11)] [term 31:SHIFT(to state 70)]
From state #17
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #18
 [term 4:REDUCE(with prod 47)] [term 6:REDUCE(with prod 47)]
 [term 7:REDUCE(with prod 47)] [term 9:REDUCE(with prod 47)]
 [term 14:REDUCE(with prod 47)] [term 25:REDUCE(with prod 47)]
 [term 28:REDUCE(with prod 47)] [term 29:REDUCE(with prod 47)]
 [term 30:REDUCE(with prod 47)] [term 31:REDUCE(with prod 47)]
 [term 33:REDUCE(with prod 47)] [term 34:REDUCE(with prod 47)]
 [term 35:REDUCE(with prod 47)] [term 36:REDUCE(with prod 47)]
 [term 37:REDUCE(with prod 47)] [term 38:REDUCE(with prod 47)]
 [term 39:REDUCE(with prod 47)] [term 40:REDUCE(with prod 47)]
 [term 44:REDUCE(with prod 47)] [term 45:REDUCE(with prod 47)]
 [term 46:REDUCE(with prod 47)] [term 47:REDUCE(with prod 47)]
From state #19
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #20
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #21
 [term 4:REDUCE(with prod 46)] [term 6:REDUCE(with prod 46)]
 [term 7:REDUCE(with prod 46)] [term 9:REDUCE(with prod 46)]
 [term 14:REDUCE(with prod 46)] [term 25:REDUCE(with prod 46)]
 [term 28:REDUCE(with prod 46)] [term 29:REDUCE(with prod 46)]
 [term 30:REDUCE(with prod 46)] [term 31:REDUCE(with prod 46)]
 [term 33:REDUCE(with prod 46)] [term 34:REDUCE(with prod 46)]
 [term 35:REDUCE(with prod 46)] [term 36:REDUCE(with prod 46)]
 [term 37:REDUCE(with prod 46)] [term 38:REDUCE(with prod 46)]
 [term 39:REDUCE(with prod 46)] [term 40:REDUCE(with prod 46)]
 [term 44:REDUCE(with prod 46)] [term 45:REDUCE(with prod 46)]
 [term 46:REDUCE(with prod 46)] [term 47:REDUCE(with prod 46)]
From state #22
 [term 4:REDUCE(with prod 12)] [term 28:SHIFT(to state 34)]
 [term 31:REDUCE(with prod 12)] [term 33:SHIFT(to state 33)]
 [term 34:SHIFT(to state 44)] [term 35:SHIFT(to state 43)]
 [term 36:SHIFT(to state 38)] [term 37:SHIFT(to state 37)]
 [term 38:SHIFT(to state 42)] [term 39:SHIFT(to state 40)]
 [term 40:SHIFT(to state 35)] [term 44:SHIFT(to state 36)]
 [term 45:SHIFT(to state 32)] [term 46:SHIFT(to state 41)]
 [term 47:SHIFT(to state 39)]
From state #23
 [term 4:REDUCE(with prod 43)] [term 6:REDUCE(with prod 43)]
 [term 7:REDUCE(with prod 43)] [term 9:REDUCE(with prod 43)]
 [term 14:REDUCE(with prod 43)] [term 25:REDUCE(with prod 43)]
 [term 28:REDUCE(with prod 43)] [term 29:REDUCE(with prod 43)]
 [term 30:REDUCE(with prod 43)] [term 31:REDUCE(with prod 43)]
 [term 33:REDUCE(with prod 43)] [term 34:REDUCE(with prod 43)]
 [term 35:REDUCE(with prod 43)] [term 36:REDUCE(with prod 43)]
 [term 37:REDUCE(with prod 43)] [term 38:REDUCE(with prod 43)]
 [term 39:REDUCE(with prod 43)] [term 40:REDUCE(with prod 43)]
 [term 44:REDUCE(with prod 43)] [term 45:REDUCE(with prod 43)]
 [term 46:REDUCE(with prod 43)] [term 47:REDUCE(with prod 43)]
From state #24
 [term 4:REDUCE(with prod 44)] [term 6:REDUCE(with prod 44)]
 [term 7:REDUCE(with prod 44)] [term 9:REDUCE(with prod 44)]
 [term 14:REDUCE(with prod 44)] [term 25:REDUCE(with prod 44)]
 [term 28:REDUCE(with prod 44)] [term 29:REDUCE(with prod 44)]
 [term 30:REDUCE(with prod 44)] [term 31:REDUCE(with prod 44)]
 [term 33:REDUCE(with prod 44)] [term 34:REDUCE(with prod 44)]
 [term 35:REDUCE(with prod 44)] [term 36:REDUCE(with prod 44)]
 [term 37:REDUCE(with prod 44)] [term 38:REDUCE(with prod 44)]
 [term 39:REDUCE(with prod 44)] [term 40:REDUCE(with prod 44)]
 [term 44:REDUCE(with prod 44)] [term 45:REDUCE(with prod 44)]
 [term 46:REDUCE(with prod 44)] [term 47:REDUCE(with prod 44)]
From state #25
 [term 4:REDUCE(with prod 48)] [term 6:REDUCE(with prod 48)]
 [term 7:REDUCE(with prod 48)] [term 9:REDUCE(with prod 48)]
 [term 14:REDUCE(with prod 48)] [term 25:REDUCE(with prod 48)]
 [term 28:REDUCE(with prod 48)] [term 29:REDUCE(with prod 48)]
 [term 30:REDUCE(with prod 48)] [term 31:REDUCE(with prod 48)]
 [term 33:REDUCE(with prod 48)] [term 34:REDUCE(with prod 48)]
 [term 35:REDUCE(with prod 48)] [term 36:REDUCE(with prod 48)]
 [term 37:REDUCE(with prod 48)] [term 38:REDUCE(with prod 48)]
 [term 39:REDUCE(with prod 48)] [term 40:REDUCE(with prod 48)]
 [term 44:REDUCE(with prod 48)] [term 45:REDUCE(with prod 48)]
 [term 46:REDUCE(with prod 48)] [term 47:REDUCE(with prod 48)]
From state #26
 [term 4:REDUCE(with prod 45)] [term 6:REDUCE(with prod 45)]
 [term 7:REDUCE(with prod 45)] [term 9:REDUCE(with prod 45)]
 [term 14:REDUCE(with prod 45)] [term 25:REDUCE(with prod 45)]
 [term 28:REDUCE(with prod 45)] [term 29:REDUCE(with prod 45)]
 [term 30:REDUCE(with prod 45)] [term 31:REDUCE(with prod 45)]
 [term 33:REDUCE(with prod 45)] [term 34:REDUCE(with prod 45)]
 [term 35:REDUCE(with prod 45)] [term 36:REDUCE(with prod 45)]
 [term 37:REDUCE(with prod 45)] [term 38:REDUCE(with prod 45)]
 [term 39:REDUCE(with prod 45)] [term 40:REDUCE(with prod 45)]
 [term 44:REDUCE(with prod 45)] [term 45:REDUCE(with prod 45)]
 [term 46:REDUCE(with prod 45)] [term 47:REDUCE(with prod 45)]
From state #27
 [term 27:SHIFT(to state 65)]
From state #28
 [term 4:REDUCE(with prod 50)] [term 6:REDUCE(with prod 50)]
 [term 7:REDUCE(with prod 50)] [term 9:REDUCE(with prod 50)]
 [term 14:REDUCE(with prod 50)] [term 24:SHIFT(to state 59)]
 [term 25:REDUCE(with prod 50)] [term 28:REDUCE(with prod 50)]
 [term 29:REDUCE(with prod 50)] [term 30:REDUCE(with prod 50)]
 [term 31:REDUCE(with prod 50)] [term 33:REDUCE(with prod 50)]
 [term 34:REDUCE(with prod 50)] [term 35:REDUCE(with prod 50)]
 [term 36:REDUCE(with prod 50)] [term 37:REDUCE(with prod 50)]
 [term 38:REDUCE(with prod 50)] [term 39:REDUCE(with prod 50)]
 [term 40:REDUCE(with prod 50)] [term 44:REDUCE(with prod 50)]
 [term 45:REDUCE(with prod 50)] [term 46:REDUCE(with prod 50)]
 [term 47:REDUCE(with prod 50)]
From state #29
 [term 4:REDUCE(with prod 68)] [term 6:REDUCE(with prod 68)]
 [term 7:REDUCE(with prod 68)] [term 9:REDUCE(with prod 68)]
 [term 14:REDUCE(with prod 68)] [term 25:REDUCE(with prod 68)]
 [term 28:REDUCE(with prod 68)] [term 29:REDUCE(with prod 68)]
 [term 30:REDUCE(with prod 68)] [term 31:REDUCE(with prod 68)]
 [term 33:REDUCE(with prod 68)] [term 34:REDUCE(with prod 68)]
 [term 35:REDUCE(with prod 68)] [term 36:REDUCE(with prod 68)]
 [term 37:REDUCE(with prod 68)] [term 38:REDUCE(with prod 68)]
 [term 39:REDUCE(with prod 68)] [term 40:REDUCE(with prod 68)]
 [term 44:REDUCE(with prod 68)] [term 45:REDUCE(with prod 68)]
 [term 46:REDUCE(with prod 68)] [term 47:REDUCE(with prod 68)]
From state #30
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #31
 [term 4:REDUCE(with prod 66)] [term 6:REDUCE(with prod 66)]
 [term 7:REDUCE(with prod 66)] [term 9:REDUCE(with prod 66)]
 [term 14:REDUCE(with prod 66)] [term 25:REDUCE(with prod 66)]
 [term 28:REDUCE(with prod 66)] [term 29:REDUCE(with prod 66)]
 [term 30:REDUCE(with prod 66)] [term 31:REDUCE(with prod 66)]
 [term 33:REDUCE(with prod 66)] [term 34:REDUCE(with prod 66)]
 [term 35:REDUCE(with prod 66)] [term 36:REDUCE(with prod 66)]
 [term 37:REDUCE(with prod 66)] [term 38:REDUCE(with prod 66)]
 [term 39:REDUCE(with prod 66)] [term 40:REDUCE(with prod 66)]
 [term 44:REDUCE(with prod 66)] [term 45:REDUCE(with prod 66)]
 [term 46:REDUCE(with prod 66)] [term 47:REDUCE(with prod 66)]
From state #32
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #33
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #34
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #35
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #36
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #37
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #38
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #39
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #40
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #41
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #42
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #43
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #44
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #45
 [term 4:REDUCE(with prod 58)] [term 6:REDUCE(with prod 58)]
 [term 7:REDUCE(with prod 58)] [term 9:REDUCE(with prod 58)]
 [term 14:REDUCE(with prod 58)] [term 25:REDUCE(with prod 58)]
 [term 28:REDUCE(with prod 58)] [term 29:REDUCE(with prod 58)]
 [term 30:REDUCE(with prod 58)] [term 31:REDUCE(with prod 58)]
 [term 33:SHIFT(to state 33)] [term 34:REDUCE(with prod 58)]
 [term 35:SHIFT(to state 43)] [term 36:SHIFT(to state 38)]
 [term 37:SHIFT(to state 37)] [term 38:SHIFT(to state 42)]
 [term 39:SHIFT(to state 40)] [term 40:SHIFT(to state 35)]
 [term 44:REDUCE(with prod 58)] [term 45:REDUCE(with prod 58)]
 [term 46:SHIFT(to state 41)] [term 47:SHIFT(to state 39)]
From state #46
 [term 4:REDUCE(with prod 61)] [term 6:REDUCE(with prod 61)]
 [term 7:REDUCE(with prod 61)] [term 9:REDUCE(with prod 61)]
 [term 14:REDUCE(with prod 61)] [term 25:REDUCE(with prod 61)]
 [term 28:REDUCE(with prod 61)] [term 29:REDUCE(with prod 61)]
 [term 30:REDUCE(with prod 61)] [term 31:REDUCE(with prod 61)]
 [term 33:REDUCE(with prod 61)] [term 34:REDUCE(with prod 61)]
 [term 35:NONASSOC] [term 36:NONASSOC]
 [term 37:NONASSOC] [term 38:NONASSOC]
 [term 39:NONASSOC] [term 40:NONASSOC]
 [term 44:REDUCE(with prod 61)] [term 45:REDUCE(with prod 61)]
 [term 46:REDUCE(with prod 61)] [term 47:REDUCE(with prod 61)]
From state #47
 [term 4:REDUCE(with prod 64)] [term 6:REDUCE(with prod 64)]
 [term 7:REDUCE(with prod 64)] [term 9:REDUCE(with prod 64)]
 [term 14:REDUCE(with prod 64)] [term 25:REDUCE(with prod 64)]
 [term 28:REDUCE(with prod 64)] [term 29:REDUCE(with prod 64)]
 [term 30:REDUCE(with prod 64)] [term 31:REDUCE(with prod 64)]
 [term 33:REDUCE(with prod 64)] [term 34:REDUCE(with prod 64)]
 [term 35:NONASSOC] [term 36:NONASSOC]
 [term 37:NONASSOC] [term 38:NONASSOC]
 [term 39:NONASSOC] [term 40:NONASSOC]
 [term 44:REDUCE(with prod 64)] [term 45:REDUCE(with prod 64)]
 [term 46:REDUCE(with prod 64)] [term 47:REDUCE(with prod 64)]
From state #48
 [term 4:REDUCE(with prod 55)] [term 6:REDUCE(with prod 55)]
 [term 7:REDUCE(with prod 55)] [term 9:REDUCE(with prod 55)]
 [term 14:REDUCE(with prod 55)] [term 25:REDUCE(with prod 55)]
 [term 28:REDUCE(with prod 55)] [term 29:REDUCE(with prod 55)]
 [term 30:REDUCE(with prod 55)] [term 31:REDUCE(with prod 55)]
 [term 33:REDUCE(with prod 55)] [term 34:REDUCE(with prod 55)]
 [term 35:SHIFT(to state 43)] [term 36:SHIFT(to state 38)]
 [term 37:SHIFT(to state 37)] [term 38:SHIFT(to state 42)]
 [term 39:SHIFT(to state 40)] [term 40:SHIFT(to state 35)]
 [term 44:REDUCE(with prod 55)] [term 45:REDUCE(with prod 55)]
 [term 46:REDUCE(with prod 55)] [term 47:REDUCE(with prod 55)]
From state #49
 [term 4:REDUCE(with prod 59)] [term 6:REDUCE(with prod 59)]
 [term 7:REDUCE(with prod 59)] [term 9:REDUCE(with prod 59)]
 [term 14:REDUCE(with prod 59)] [term 25:REDUCE(with prod 59)]
 [term 28:REDUCE(with prod 59)] [term 29:REDUCE(with prod 59)]
 [term 30:REDUCE(with prod 59)] [term 31:REDUCE(with prod 59)]
 [term 33:REDUCE(with prod 59)] [term 34:REDUCE(with prod 59)]
 [term 35:NONASSOC] [term 36:NONASSOC]
 [term 37:NONASSOC] [term 38:NONASSOC]
 [term 39:NONASSOC] [term 40:NONASSOC]
 [term 44:REDUCE(with prod 59)] [term 45:REDUCE(with prod 59)]
 [term 46:REDUCE(with prod 59)] [term 47:REDUCE(with prod 59)]
From state #50
 [term 4:REDUCE(with prod 56)] [term 6:REDUCE(with prod 56)]
 [term 7:REDUCE(with prod 56)] [term 9:REDUCE(with prod 56)]
 [term 14:REDUCE(with prod 56)] [term 25:REDUCE(with prod 56)]
 [term 28:REDUCE(with prod 56)] [term 29:REDUCE(with prod 56)]
 [term 30:REDUCE(with prod 56)] [term 31:REDUCE(with prod 56)]
 [term 33:REDUCE(with prod 56)] [term 34:REDUCE(with prod 56)]
 [term 35:SHIFT(to state 43)] [term 36:SHIFT(to state 38)]
 [term 37:SHIFT(to state 37)] [term 38:SHIFT(to state 42)]
 [term 39:SHIFT(to state 40)] [term 40:SHIFT(to state 35)]
 [term 44:REDUCE(with prod 56)] [term 45:REDUCE(with prod 56)]
 [term 46:REDUCE(with prod 56)] [term 47:REDUCE(with prod 56)]
From state #51
 [term 4:REDUCE(with prod 62)] [term 6:REDUCE(with prod 62)]
 [term 7:REDUCE(with prod 62)] [term 9:REDUCE(with prod 62)]
 [term 14:REDUCE(with prod 62)] [term 25:REDUCE(with prod 62)]
 [term 28:REDUCE(with prod 62)] [term 29:REDUCE(with prod 62)]
 [term 30:REDUCE(with prod 62)] [term 31:REDUCE(with prod 62)]
 [term 33:REDUCE(with prod 62)] [term 34:REDUCE(with prod 62)]
 [term 35:NONASSOC] [term 36:NONASSOC]
 [term 37:NONASSOC] [term 38:NONASSOC]
 [term 39:NONASSOC] [term 40:NONASSOC]
 [term 44:REDUCE(with prod 62)] [term 45:REDUCE(with prod 62)]
 [term 46:REDUCE(with prod 62)] [term 47:REDUCE(with prod 62)]
From state #52
 [term 4:REDUCE(with prod 63)] [term 6:REDUCE(with prod 63)]
 [term 7:REDUCE(with prod 63)] [term 9:REDUCE(with prod 63)]
 [term 14:REDUCE(with prod 63)] [term 25:REDUCE(with prod 63)]
 [term 28:REDUCE(with prod 63)] [term 29:REDUCE(with prod 63)]
 [term 30:REDUCE(with prod 63)] [term 31:REDUCE(with prod 63)]
 [term 33:REDUCE(with prod 63)] [term 34:REDUCE(with prod 63)]
 [term 35:NONASSOC] [term 36:NONASSOC]
 [term 37:NONASSOC] [term 38:NONASSOC]
 [term 39:NONASSOC] [term 40:NONASSOC]
 [term 44:REDUCE(with prod 63)] [term 45:REDUCE(with prod 63)]
 [term 46:REDUCE(with prod 63)] [term 47:REDUCE(with prod 63)]
From state #53
 [term 4:REDUCE(with prod 53)] [term 6:REDUCE(with prod 53)]
 [term 7:REDUCE(with prod 53)] [term 9:REDUCE(with prod 53)]
 [term 14:REDUCE(with prod 53)] [term 25:REDUCE(with prod 53)]
 [term 28:REDUCE(with prod 53)] [term 29:REDUCE(with prod 53)]
 [term 30:REDUCE(with prod 53)] [term 31:REDUCE(with prod 53)]
 [term 33:SHIFT(to state 33)] [term 34:REDUCE(with prod 53)]
 [term 35:SHIFT(to state 43)] [term 36:SHIFT(to state 38)]
 [term 37:SHIFT(to state 37)] [term 38:SHIFT(to state 42)]
 [term 39:SHIFT(to state 40)] [term 40:SHIFT(to state 35)]
 [term 44:REDUCE(with prod 53)] [term 45:REDUCE(with prod 53)]
 [term 46:SHIFT(to state 41)] [term 47:SHIFT(to state 39)]
From state #54
 [term 4:REDUCE(with prod 60)] [term 6:REDUCE(with prod 60)]
 [term 7:REDUCE(with prod 60)] [term 9:REDUCE(with prod 60)]
 [term 14:REDUCE(with prod 60)] [term 25:REDUCE(with prod 60)]
 [term 28:REDUCE(with prod 60)] [term 29:REDUCE(with prod 60)]
 [term 30:REDUCE(with prod 60)] [term 31:REDUCE(with prod 60)]
 [term 33:REDUCE(with prod 60)] [term 34:REDUCE(with prod 60)]
 [term 35:NONASSOC] [term 36:NONASSOC]
 [term 37:NONASSOC] [term 38:NONASSOC]
 [term 39:NONASSOC] [term 40:NONASSOC]
 [term 44:REDUCE(with prod 60)] [term 45:REDUCE(with prod 60)]
 [term 46:REDUCE(with prod 60)] [term 47:REDUCE(with prod 60)]
From state #55
 [term 28:SHIFT(to state 34)] [term 29:SHIFT(to state 56)]
 [term 33:SHIFT(to state 33)] [term 34:SHIFT(to state 44)]
 [term 35:SHIFT(to state 43)] [term 36:SHIFT(to state 38)]
 [term 37:SHIFT(to state 37)] [term 38:SHIFT(to state 42)]
 [term 39:SHIFT(to state 40)] [term 40:SHIFT(to state 35)]
 [term 44:SHIFT(to state 36)] [term 45:SHIFT(to state 32)]
 [term 46:SHIFT(to state 41)] [term 47:SHIFT(to state 39)]
From state #56
 [term 4:REDUCE(with prod 51)] [term 6:REDUCE(with prod 51)]
 [term 7:REDUCE(with prod 51)] [term 9:REDUCE(with prod 51)]
 [term 14:REDUCE(with prod 51)] [term 25:REDUCE(with prod 51)]
 [term 28:REDUCE(with prod 51)] [term 29:REDUCE(with prod 51)]
 [term 30:REDUCE(with prod 51)] [term 31:REDUCE(with prod 51)]
 [term 33:REDUCE(with prod 51)] [term 34:REDUCE(with prod 51)]
 [term 35:REDUCE(with prod 51)] [term 36:REDUCE(with prod 51)]
 [term 37:REDUCE(with prod 51)] [term 38:REDUCE(with prod 51)]
 [term 39:REDUCE(with prod 51)] [term 40:REDUCE(with prod 51)]
 [term 44:REDUCE(with prod 51)] [term 45:REDUCE(with prod 51)]
 [term 46:REDUCE(with prod 51)] [term 47:REDUCE(with prod 51)]
From state #57
 [term 4:REDUCE(with prod 57)] [term 6:REDUCE(with prod 57)]
 [term 7:REDUCE(with prod 57)] [term 9:REDUCE(with prod 57)]
 [term 14:REDUCE(with prod 57)] [term 25:REDUCE(with prod 57)]
 [term 28:REDUCE(with prod 57)] [term 29:REDUCE(with prod 57)]
 [term 30:REDUCE(with prod 57)] [term 31:REDUCE(with prod 57)]
 [term 33:REDUCE(with prod 57)] [term 34:REDUCE(with prod 57)]
 [term 35:SHIFT(to state 43)] [term 36:SHIFT(to state 38)]
 [term 37:SHIFT(to state 37)] [term 38:SHIFT(to state 42)]
 [term 39:SHIFT(to state 40)] [term 40:SHIFT(to state 35)]
 [term 44:REDUCE(with prod 57)] [term 45:REDUCE(with prod 57)]
 [term 46:REDUCE(with prod 57)] [term 47:REDUCE(with prod 57)]
From state #58
 [term 4:REDUCE(with prod 54)] [term 6:REDUCE(with prod 54)]
 [term 7:REDUCE(with prod 54)] [term 9:REDUCE(with prod 54)]
 [term 14:REDUCE(with prod 54)] [term 25:REDUCE(with prod 54)]
 [term 28:REDUCE(with prod 54)] [term 29:REDUCE(with prod 54)]
 [term 30:REDUCE(with prod 54)] [term 31:REDUCE(with prod 54)]
 [term 33:SHIFT(to state 33)] [term 34:REDUCE(with prod 54)]
 [term 35:SHIFT(to state 43)] [term 36:SHIFT(to state 38)]
 [term 37:SHIFT(to state 37)] [term 38:SHIFT(to state 42)]
 [term 39:SHIFT(to state 40)] [term 40:SHIFT(to state 35)]
 [term 44:REDUCE(with prod 54)] [term 45:REDUCE(with prod 54)]
 [term 46:SHIFT(to state 41)] [term 47:SHIFT(to state 39)]
From state #59
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #60
 [term 14:REDUCE(with prod 42)] [term 25:REDUCE(with prod 42)]
 [term 28:SHIFT(to state 34)] [term 30:SHIFT(to state 63)]
 [term 33:SHIFT(to state 33)] [term 34:SHIFT(to state 44)]
 [term 35:SHIFT(to state 43)] [term 36:SHIFT(to state 38)]
 [term 37:SHIFT(to state 37)] [term 38:SHIFT(to state 42)]
 [term 39:SHIFT(to state 40)] [term 40:SHIFT(to state 35)]
 [term 44:SHIFT(to state 36)] [term 45:SHIFT(to state 32)]
 [term 46:SHIFT(to state 41)] [term 47:SHIFT(to state 39)]
From state #61
 [term 25:SHIFT(to state 62)]
From state #62
 [term 4:REDUCE(with prod 52)] [term 6:REDUCE(with prod 52)]
 [term 7:REDUCE(with prod 52)] [term 9:REDUCE(with prod 52)]
 [term 14:REDUCE(with prod 52)] [term 25:REDUCE(with prod 52)]
 [term 28:REDUCE(with prod 52)] [term 29:REDUCE(with prod 52)]
 [term 30:REDUCE(with prod 52)] [term 31:REDUCE(with prod 52)]
 [term 33:REDUCE(with prod 52)] [term 34:REDUCE(with prod 52)]
 [term 35:REDUCE(with prod 52)] [term 36:REDUCE(with prod 52)]
 [term 37:REDUCE(with prod 52)] [term 38:REDUCE(with prod 52)]
 [term 39:REDUCE(with prod 52)] [term 40:REDUCE(with prod 52)]
 [term 44:REDUCE(with prod 52)] [term 45:REDUCE(with prod 52)]
 [term 46:REDUCE(with prod 52)] [term 47:REDUCE(with prod 52)]
From state #63
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #64
 [term 14:REDUCE(with prod 41)] [term 25:REDUCE(with prod 41)]
From state #65
 [term 32:SHIFT(to state 66)]
From state #66
 [term 19:SHIFT(to state 15)] [term 20:SHIFT(to state 14)]
 [term 21:SHIFT(to state 11)] [term 22:SHIFT(to state 13)]
 [term 23:SHIFT(to state 8)] [term 24:SHIFT(to state 10)]
 [term 26:SHIFT(to state 9)]
From state #67
 [term 4:REDUCE(with prod 49)] [term 6:REDUCE(with prod 49)]
 [term 7:REDUCE(with prod 49)] [term 9:REDUCE(with prod 49)]
 [term 14:REDUCE(with prod 49)] [term 25:REDUCE(with prod 49)]
 [term 28:REDUCE(with prod 49)] [term 29:REDUCE(with prod 49)]
 [term 30:REDUCE(with prod 49)] [term 31:REDUCE(with prod 49)]
 [term 33:REDUCE(with prod 49)] [term 34:REDUCE(with prod 49)]
 [term 35:REDUCE(with prod 49)] [term 36:REDUCE(with prod 49)]
 [term 37:REDUCE(with prod 49)] [term 38:REDUCE(with prod 49)]
 [term 39:REDUCE(with prod 49)] [term 40:REDUCE(with prod 49)]
 [term 44:REDUCE(with prod 49)] [term 45:REDUCE(with prod 49)]
 [term 46:REDUCE(with prod 49)] [term 47:REDUCE(with prod 49)]
From state #68
 [term 4:REDUCE(with prod 67)] [term 6:REDUCE(with prod 67)]
 [term 7:REDUCE(with prod 67)] [term 9:REDUCE(with prod 67)]
 [term 14:REDUCE(with prod 67)] [term 25:REDUCE(with prod 67)]
 [term 28:REDUCE(with prod 67)] [term 29:REDUCE(with prod 67)]
 [term 30:REDUCE(with prod 67)] [term 31:REDUCE(with prod 67)]
 [term 33:REDUCE(with prod 67)] [term 34:REDUCE(with prod 67)]
 [term 35:REDUCE(with prod 67)] [term 36:REDUCE(with prod 67)]
 [term 37:REDUCE(with prod 67)] [term 38:REDUCE(with prod 67)]
 [term 39:REDUCE(with prod 67)] [term 40:REDUCE(with prod 67)]
 [term 44:REDUCE(with prod 67)] [term 45:REDUCE(with prod 67)]
 [term 46:REDUCE(with prod 67)] [term 47:REDUCE(with prod 67)]
From state #69
 [term 4:REDUCE(with prod 65)] [term 6:REDUCE(with prod 65)]
 [term 7:REDUCE(with prod 65)] [term 9:REDUCE(with prod 65)]
 [term 14:REDUCE(with prod 65)] [term 25:REDUCE(with prod 65)]
 [term 28:REDUCE(with prod 65)] [term 29:REDUCE(with prod 65)]
 [term 30:REDUCE(with prod 65)] [term 31:REDUCE(with prod 65)]
 [term 33:REDUCE(with prod 65)] [term 34:REDUCE(with prod 65)]
 [term 35:REDUCE(with prod 65)] [term 36:REDUCE(with prod 65)]
 [term 37:REDUCE(with prod 65)] [term 38:REDUCE(with prod 65)]
 [term 39:REDUCE(with prod 65)] [term 40:REDUCE(with prod 65)]
 [term 44:REDUCE(with prod 65)] [term 45:REDUCE(with prod 65)]
 [term 46:REDUCE(with prod 65)] [term 47:REDUCE(with prod 65)]
From state #70
 [term 18:SHIFT(to state 4)]
From state #71
 [term 4:REDUCE(with prod 10)] [term 31:REDUCE(with prod 10)]
From state #72
 [term 25:SHIFT(to state 79)]
From state #73
 [term 25:REDUCE(with prod 23)] [term 30:SHIFT(to state 77)]
From state #74
 [term 41:SHIFT(to state 75)]
From state #75
 [term 19:SHIFT(to state 15)] [term 20:SHIFT(to state 14)]
 [term 21:SHIFT(to state 11)] [term 22:SHIFT(to state 13)]
 [term 23:SHIFT(to state 8)] [term 24:SHIFT(to state 10)]
 [term 26:SHIFT(to state 9)]
From state #76
 [term 1:REDUCE(with prod 21)] [term 4:REDUCE(with prod 21)]
 [term 5:REDUCE(with prod 21)] [term 6:REDUCE(with prod 21)]
 [term 7:REDUCE(with prod 21)] [term 8:REDUCE(with prod 21)]
 [term 9:REDUCE(with prod 21)] [term 10:REDUCE(with prod 21)]
 [term 11:REDUCE(with prod 21)] [term 14:REDUCE(with prod 21)]
 [term 15:REDUCE(with prod 21)] [term 16:REDUCE(with prod 21)]
 [term 17:REDUCE(with prod 21)] [term 18:REDUCE(with prod 21)]
 [term 19:REDUCE(with prod 21)] [term 25:REDUCE(with prod 21)]
 [term 26:REDUCE(with prod 21)] [term 28:REDUCE(with prod 21)]
 [term 29:REDUCE(with prod 21)] [term 30:REDUCE(with prod 21)]
 [term 31:REDUCE(with prod 21)] [term 33:REDUCE(with prod 21)]
 [term 34:REDUCE(with prod 21)] [term 35:REDUCE(with prod 21)]
 [term 36:REDUCE(with prod 21)] [term 37:REDUCE(with prod 21)]
 [term 38:REDUCE(with prod 21)] [term 39:REDUCE(with prod 21)]
 [term 40:REDUCE(with prod 21)] [term 42:REDUCE(with prod 21)]
 [term 43:REDUCE(with prod 21)] [term 44:REDUCE(with prod 21)]
 [term 45:REDUCE(with prod 21)] [term 46:REDUCE(with prod 21)]
 [term 47:REDUCE(with prod 21)] [term 49:REDUCE(with prod 21)]
 [term 50:REDUCE(with prod 21)] [term 51:REDUCE(with prod 21)]
 [term 52:REDUCE(with prod 21)] [term 53:REDUCE(with prod 21)]
From state #77
 [term 19:SHIFT(to state 15)] [term 20:SHIFT(to state 14)]
 [term 21:SHIFT(to state 11)] [term 22:SHIFT(to state 13)]
 [term 23:SHIFT(to state 8)] [term 24:SHIFT(to state 10)]
 [term 26:SHIFT(to state 9)]
From state #78
 [term 25:REDUCE(with prod 22)]
From state #79
 [term 41:SHIFT(to state 80)]
From state #80
 [term 19:SHIFT(to state 15)] [term 20:SHIFT(to state 14)]
 [term 21:SHIFT(to state 11)] [term 22:SHIFT(to state 13)]
 [term 23:SHIFT(to state 8)] [term 24:SHIFT(to state 10)]
 [term 26:SHIFT(to state 9)]
From state #81
 [term 1:REDUCE(with prod 20)] [term 4:REDUCE(with prod 20)]
 [term 5:REDUCE(with prod 20)] [term 6:REDUCE(with prod 20)]
 [term 7:REDUCE(with prod 20)] [term 8:REDUCE(with prod 20)]
 [term 9:REDUCE(with prod 20)] [term 10:REDUCE(with prod 20)]
 [term 11:REDUCE(with prod 20)] [term 14:REDUCE(with prod 20)]
 [term 15:REDUCE(with prod 20)] [term 16:REDUCE(with prod 20)]
 [term 17:REDUCE(with prod 20)] [term 18:REDUCE(with prod 20)]
 [term 19:REDUCE(with prod 20)] [term 25:REDUCE(with prod 20)]
 [term 26:REDUCE(with prod 20)] [term 28:REDUCE(with prod 20)]
 [term 29:REDUCE(with prod 20)] [term 30:REDUCE(with prod 20)]
 [term 31:REDUCE(with prod 20)] [term 33:REDUCE(with prod 20)]
 [term 34:REDUCE(with prod 20)] [term 35:REDUCE(with prod 20)]
 [term 36:REDUCE(with prod 20)] [term 37:REDUCE(with prod 20)]
 [term 38:REDUCE(with prod 20)] [term 39:REDUCE(with prod 20)]
 [term 40:REDUCE(with prod 20)] [term 42:REDUCE(with prod 20)]
 [term 43:REDUCE(with prod 20)] [term 44:REDUCE(with prod 20)]
 [term 45:REDUCE(with prod 20)] [term 46:REDUCE(with prod 20)]
 [term 47:REDUCE(with prod 20)] [term 49:REDUCE(with prod 20)]
 [term 50:REDUCE(with prod 20)] [term 51:REDUCE(with prod 20)]
 [term 52:REDUCE(with prod 20)] [term 53:REDUCE(with prod 20)]
From state #82
 [term 26:SHIFT(to state 83)]
From state #83
 [term 1:REDUCE(with prod 19)] [term 4:REDUCE(with prod 19)]
 [term 5:REDUCE(with prod 19)] [term 6:REDUCE(with prod 19)]
 [term 7:REDUCE(with prod 19)] [term 8:REDUCE(with prod 19)]
 [term 9:REDUCE(with prod 19)] [term 10:REDUCE(with prod 19)]
 [term 11:REDUCE(with prod 19)] [term 14:REDUCE(with prod 19)]
 [term 15:REDUCE(with prod 19)] [term 16:REDUCE(with prod 19)]
 [term 17:REDUCE(with prod 19)] [term 18:REDUCE(with prod 19)]
 [term 19:REDUCE(with prod 19)] [term 25:REDUCE(with prod 19)]
 [term 26:REDUCE(with prod 19)] [term 28:REDUCE(with prod 19)]
 [term 29:REDUCE(with prod 19)] [term 30:REDUCE(with prod 19)]
 [term 31:REDUCE(with prod 19)] [term 33:REDUCE(with prod 19)]
 [term 34:REDUCE(with prod 19)] [term 35:REDUCE(with prod 19)]
 [term 36:REDUCE(with prod 19)] [term 37:REDUCE(with prod 19)]
 [term 38:REDUCE(with prod 19)] [term 39:REDUCE(with prod 19)]
 [term 40:REDUCE(with prod 19)] [term 42:REDUCE(with prod 19)]
 [term 43:REDUCE(with prod 19)] [term 44:REDUCE(with prod 19)]
 [term 45:REDUCE(with prod 19)] [term 46:REDUCE(with prod 19)]
 [term 47:REDUCE(with prod 19)] [term 49:REDUCE(with prod 19)]
 [term 50:REDUCE(with prod 19)] [term 51:REDUCE(with prod 19)]
 [term 52:REDUCE(with prod 19)] [term 53:REDUCE(with prod 19)]
From state #84
 [term 0:REDUCE(with prod 5)] [term 2:SHIFT(to state 86)]
From state #85
 [term 0:REDUCE(with prod 0)]
From state #86
 [term 18:SHIFT(to state 87)]
From state #87
 [term 24:SHIFT(to state 88)]
From state #88
 [term 18:SHIFT(to state 89)] [term 25:SHIFT(to state 91)]
From state #89
 [term 32:SHIFT(to state 153)]
From state #90
 [term 25:SHIFT(to state 148)]
From state #91
 [term 32:SHIFT(to state 92)]
From state #92
 [term 19:SHIFT(to state 15)] [term 20:SHIFT(to state 14)]
 [term 21:SHIFT(to state 11)] [term 22:SHIFT(to state 13)]
 [term 23:SHIFT(to state 8)] [term 24:SHIFT(to state 10)]
 [term 26:SHIFT(to state 9)]
From state #93
 [term 1:SHIFT(to state 103)] [term 5:SHIFT(to state 100)]
 [term 8:SHIFT(to state 95)] [term 10:SHIFT(to state 106)]
 [term 11:SHIFT(to state 96)] [term 15:SHIFT(to state 98)]
 [term 16:SHIFT(to state 30)] [term 17:SHIFT(to state 20)]
 [term 18:SHIFT(to state 102)] [term 19:SHIFT(to state 23)]
 [term 26:SHIFT(to state 27)] [term 43:SHIFT(to state 99)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #94
 [term 4:REDUCE(with prod 25)] [term 7:REDUCE(with prod 25)]
 [term 31:SHIFT(to state 146)]
From state #95
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #96
 [term 18:SHIFT(to state 4)]
From state #97
 [term 4:SHIFT(to state 137)]
From state #98
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #99
 [term 4:REDUCE(with prod 26)] [term 7:REDUCE(with prod 26)]
 [term 31:REDUCE(with prod 26)]
From state #100
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #101
 [term 14:REDUCE(with prod 42)] [term 28:SHIFT(to state 125)]
 [term 30:SHIFT(to state 63)] [term 33:SHIFT(to state 33)]
 [term 34:SHIFT(to state 44)] [term 35:SHIFT(to state 43)]
 [term 36:SHIFT(to state 38)] [term 37:SHIFT(to state 37)]
 [term 38:SHIFT(to state 42)] [term 39:SHIFT(to state 40)]
 [term 40:SHIFT(to state 35)] [term 44:SHIFT(to state 36)]
 [term 45:SHIFT(to state 32)] [term 46:SHIFT(to state 41)]
 [term 47:SHIFT(to state 39)]
From state #102
 [term 13:REDUCE(with prod 40)] [term 14:REDUCE(with prod 50)]
 [term 24:SHIFT(to state 118)] [term 28:REDUCE(with prod 50)]
 [term 30:SHIFT(to state 117)] [term 33:REDUCE(with prod 50)]
 [term 34:REDUCE(with prod 50)] [term 35:REDUCE(with prod 50)]
 [term 36:REDUCE(with prod 50)] [term 37:REDUCE(with prod 50)]
 [term 38:REDUCE(with prod 50)] [term 39:REDUCE(with prod 50)]
 [term 40:REDUCE(with prod 50)] [term 42:SHIFT(to state 119)]
 [term 44:REDUCE(with prod 50)] [term 45:REDUCE(with prod 50)]
 [term 46:REDUCE(with prod 50)] [term 47:REDUCE(with prod 50)]
From state #103
 [term 4:REDUCE(with prod 38)] [term 7:REDUCE(with prod 38)]
 [term 14:REDUCE(with prod 68)] [term 28:REDUCE(with prod 68)]
 [term 30:REDUCE(with prod 68)] [term 31:REDUCE(with prod 38)]
 [term 33:REDUCE(with prod 68)] [term 34:REDUCE(with prod 68)]
 [term 35:REDUCE(with prod 68)] [term 36:REDUCE(with prod 68)]
 [term 37:REDUCE(with prod 68)] [term 38:REDUCE(with prod 68)]
 [term 39:REDUCE(with prod 68)] [term 40:REDUCE(with prod 68)]
 [term 44:REDUCE(with prod 68)] [term 45:REDUCE(with prod 68)]
 [term 46:REDUCE(with prod 68)] [term 47:REDUCE(with prod 68)]
From state #104
 [term 14:SHIFT(to state 116)]
From state #105
 [term 13:SHIFT(to state 115)]
From state #106
 [term 18:SHIFT(to state 107)]
From state #107
 [term 42:SHIFT(to state 108)]
From state #108
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #109
 [term 28:SHIFT(to state 34)] [term 30:SHIFT(to state 110)]
 [term 33:SHIFT(to state 33)] [term 34:SHIFT(to state 44)]
 [term 35:SHIFT(to state 43)] [term 36:SHIFT(to state 38)]
 [term 37:SHIFT(to state 37)] [term 38:SHIFT(to state 42)]
 [term 39:SHIFT(to state 40)] [term 40:SHIFT(to state 35)]
 [term 44:SHIFT(to state 36)] [term 45:SHIFT(to state 32)]
 [term 46:SHIFT(to state 41)] [term 47:SHIFT(to state 39)]
From state #110
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #111
 [term 9:SHIFT(to state 112)] [term 28:SHIFT(to state 34)]
 [term 33:SHIFT(to state 33)] [term 34:SHIFT(to state 44)]
 [term 35:SHIFT(to state 43)] [term 36:SHIFT(to state 38)]
 [term 37:SHIFT(to state 37)] [term 38:SHIFT(to state 42)]
 [term 39:SHIFT(to state 40)] [term 40:SHIFT(to state 35)]
 [term 44:SHIFT(to state 36)] [term 45:SHIFT(to state 32)]
 [term 46:SHIFT(to state 41)] [term 47:SHIFT(to state 39)]
From state #112
 [term 1:SHIFT(to state 103)] [term 5:SHIFT(to state 100)]
 [term 8:SHIFT(to state 95)] [term 10:SHIFT(to state 106)]
 [term 11:SHIFT(to state 96)] [term 15:SHIFT(to state 98)]
 [term 16:SHIFT(to state 30)] [term 17:SHIFT(to state 20)]
 [term 18:SHIFT(to state 102)] [term 19:SHIFT(to state 23)]
 [term 26:SHIFT(to state 27)] [term 43:SHIFT(to state 99)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #113
 [term 4:SHIFT(to state 114)]
From state #114
 [term 4:REDUCE(with prod 30)] [term 7:REDUCE(with prod 30)]
 [term 31:REDUCE(with prod 30)]
From state #115
 [term 4:REDUCE(with prod 35)] [term 7:REDUCE(with prod 35)]
 [term 31:REDUCE(with prod 35)]
From state #116
 [term 4:REDUCE(with prod 36)] [term 7:REDUCE(with prod 36)]
 [term 31:REDUCE(with prod 36)]
From state #117
 [term 18:SHIFT(to state 123)]
From state #118
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #119
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #120
 [term 4:REDUCE(with prod 32)] [term 7:REDUCE(with prod 32)]
 [term 28:SHIFT(to state 34)] [term 31:REDUCE(with prod 32)]
 [term 33:SHIFT(to state 33)] [term 34:SHIFT(to state 44)]
 [term 35:SHIFT(to state 43)] [term 36:SHIFT(to state 38)]
 [term 37:SHIFT(to state 37)] [term 38:SHIFT(to state 42)]
 [term 39:SHIFT(to state 40)] [term 40:SHIFT(to state 35)]
 [term 44:SHIFT(to state 36)] [term 45:SHIFT(to state 32)]
 [term 46:SHIFT(to state 41)] [term 47:SHIFT(to state 39)]
From state #121
 [term 25:SHIFT(to state 122)]
From state #122
 [term 4:REDUCE(with prod 34)] [term 7:REDUCE(with prod 34)]
 [term 14:REDUCE(with prod 52)] [term 28:REDUCE(with prod 52)]
 [term 30:REDUCE(with prod 52)] [term 31:REDUCE(with prod 34)]
 [term 33:REDUCE(with prod 52)] [term 34:REDUCE(with prod 52)]
 [term 35:REDUCE(with prod 52)] [term 36:REDUCE(with prod 52)]
 [term 37:REDUCE(with prod 52)] [term 38:REDUCE(with prod 52)]
 [term 39:REDUCE(with prod 52)] [term 40:REDUCE(with prod 52)]
 [term 44:REDUCE(with prod 52)] [term 45:REDUCE(with prod 52)]
 [term 46:REDUCE(with prod 52)] [term 47:REDUCE(with prod 52)]
From state #123
 [term 13:REDUCE(with prod 40)] [term 30:SHIFT(to state 117)]
From state #124
 [term 13:REDUCE(with prod 39)]
From state #125
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #126
 [term 28:SHIFT(to state 34)] [term 29:SHIFT(to state 127)]
 [term 33:SHIFT(to state 33)] [term 34:SHIFT(to state 44)]
 [term 35:SHIFT(to state 43)] [term 36:SHIFT(to state 38)]
 [term 37:SHIFT(to state 37)] [term 38:SHIFT(to state 42)]
 [term 39:SHIFT(to state 40)] [term 40:SHIFT(to state 35)]
 [term 44:SHIFT(to state 36)] [term 45:SHIFT(to state 32)]
 [term 46:SHIFT(to state 41)] [term 47:SHIFT(to state 39)]
From state #127
 [term 14:REDUCE(with prod 51)] [term 28:REDUCE(with prod 51)]
 [term 30:REDUCE(with prod 51)] [term 33:REDUCE(with prod 51)]
 [term 34:REDUCE(with prod 51)] [term 35:REDUCE(with prod 51)]
 [term 36:REDUCE(with prod 51)] [term 37:REDUCE(with prod 51)]
 [term 38:REDUCE(with prod 51)] [term 39:REDUCE(with prod 51)]
 [term 40:REDUCE(with prod 51)] [term 42:SHIFT(to state 128)]
 [term 44:REDUCE(with prod 51)] [term 45:REDUCE(with prod 51)]
 [term 46:REDUCE(with prod 51)] [term 47:REDUCE(with prod 51)]
From state #128
 [term 1:SHIFT(to state 29)] [term 16:SHIFT(to state 30)]
 [term 17:SHIFT(to state 20)] [term 18:SHIFT(to state 28)]
 [term 19:SHIFT(to state 23)] [term 26:SHIFT(to state 27)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #129
 [term 4:REDUCE(with prod 33)] [term 7:REDUCE(with prod 33)]
 [term 28:SHIFT(to state 34)] [term 31:REDUCE(with prod 33)]
 [term 33:SHIFT(to state 33)] [term 34:SHIFT(to state 44)]
 [term 35:SHIFT(to state 43)] [term 36:SHIFT(to state 38)]
 [term 37:SHIFT(to state 37)] [term 38:SHIFT(to state 42)]
 [term 39:SHIFT(to state 40)] [term 40:SHIFT(to state 35)]
 [term 44:SHIFT(to state 36)] [term 45:SHIFT(to state 32)]
 [term 46:SHIFT(to state 41)] [term 47:SHIFT(to state 39)]
From state #130
 [term 6:SHIFT(to state 131)] [term 28:SHIFT(to state 34)]
 [term 33:SHIFT(to state 33)] [term 34:SHIFT(to state 44)]
 [term 35:SHIFT(to state 43)] [term 36:SHIFT(to state 38)]
 [term 37:SHIFT(to state 37)] [term 38:SHIFT(to state 42)]
 [term 39:SHIFT(to state 40)] [term 40:SHIFT(to state 35)]
 [term 44:SHIFT(to state 36)] [term 45:SHIFT(to state 32)]
 [term 46:SHIFT(to state 41)] [term 47:SHIFT(to state 39)]
From state #131
 [term 1:SHIFT(to state 103)] [term 5:SHIFT(to state 100)]
 [term 8:SHIFT(to state 95)] [term 10:SHIFT(to state 106)]
 [term 11:SHIFT(to state 96)] [term 15:SHIFT(to state 98)]
 [term 16:SHIFT(to state 30)] [term 17:SHIFT(to state 20)]
 [term 18:SHIFT(to state 102)] [term 19:SHIFT(to state 23)]
 [term 26:SHIFT(to state 27)] [term 43:SHIFT(to state 99)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #132
 [term 4:REDUCE(with prod 29)] [term 7:SHIFT(to state 133)]
 [term 31:REDUCE(with prod 29)]
From state #133
 [term 1:SHIFT(to state 103)] [term 5:SHIFT(to state 100)]
 [term 8:SHIFT(to state 95)] [term 10:SHIFT(to state 106)]
 [term 11:SHIFT(to state 96)] [term 15:SHIFT(to state 98)]
 [term 16:SHIFT(to state 30)] [term 17:SHIFT(to state 20)]
 [term 18:SHIFT(to state 102)] [term 19:SHIFT(to state 23)]
 [term 26:SHIFT(to state 27)] [term 43:SHIFT(to state 99)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #134
 [term 4:SHIFT(to state 135)]
From state #135
 [term 4:REDUCE(with prod 28)] [term 7:REDUCE(with prod 28)]
 [term 31:REDUCE(with prod 28)]
From state #136
 [term 4:REDUCE(with prod 37)] [term 7:REDUCE(with prod 37)]
 [term 28:SHIFT(to state 34)] [term 31:REDUCE(with prod 37)]
 [term 33:SHIFT(to state 33)] [term 34:SHIFT(to state 44)]
 [term 35:SHIFT(to state 43)] [term 36:SHIFT(to state 38)]
 [term 37:SHIFT(to state 37)] [term 38:SHIFT(to state 42)]
 [term 39:SHIFT(to state 40)] [term 40:SHIFT(to state 35)]
 [term 44:SHIFT(to state 36)] [term 45:SHIFT(to state 32)]
 [term 46:SHIFT(to state 41)] [term 47:SHIFT(to state 39)]
From state #137
 [term 0:REDUCE(with prod 7)] [term 2:REDUCE(with prod 7)]
From state #138
 [term 31:SHIFT(to state 139)]
From state #139
 [term 1:SHIFT(to state 103)] [term 5:SHIFT(to state 100)]
 [term 8:SHIFT(to state 95)] [term 10:SHIFT(to state 106)]
 [term 11:SHIFT(to state 96)] [term 15:SHIFT(to state 98)]
 [term 16:SHIFT(to state 30)] [term 17:SHIFT(to state 20)]
 [term 18:SHIFT(to state 102)] [term 19:SHIFT(to state 23)]
 [term 26:SHIFT(to state 27)] [term 43:SHIFT(to state 99)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #140
 [term 4:SHIFT(to state 141)]
From state #141
 [term 4:REDUCE(with prod 31)] [term 7:REDUCE(with prod 31)]
 [term 31:REDUCE(with prod 31)]
From state #142
 [term 9:SHIFT(to state 143)] [term 28:SHIFT(to state 34)]
 [term 33:SHIFT(to state 33)] [term 34:SHIFT(to state 44)]
 [term 35:SHIFT(to state 43)] [term 36:SHIFT(to state 38)]
 [term 37:SHIFT(to state 37)] [term 38:SHIFT(to state 42)]
 [term 39:SHIFT(to state 40)] [term 40:SHIFT(to state 35)]
 [term 44:SHIFT(to state 36)] [term 45:SHIFT(to state 32)]
 [term 46:SHIFT(to state 41)] [term 47:SHIFT(to state 39)]
From state #143
 [term 1:SHIFT(to state 103)] [term 5:SHIFT(to state 100)]
 [term 8:SHIFT(to state 95)] [term 10:SHIFT(to state 106)]
 [term 11:SHIFT(to state 96)] [term 15:SHIFT(to state 98)]
 [term 16:SHIFT(to state 30)] [term 17:SHIFT(to state 20)]
 [term 18:SHIFT(to state 102)] [term 19:SHIFT(to state 23)]
 [term 26:SHIFT(to state 27)] [term 43:SHIFT(to state 99)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #144
 [term 4:SHIFT(to state 145)]
From state #145
 [term 4:REDUCE(with prod 27)] [term 7:REDUCE(with prod 27)]
 [term 31:REDUCE(with prod 27)]
From state #146
 [term 1:SHIFT(to state 103)] [term 5:SHIFT(to state 100)]
 [term 8:SHIFT(to state 95)] [term 10:SHIFT(to state 106)]
 [term 11:SHIFT(to state 96)] [term 15:SHIFT(to state 98)]
 [term 16:SHIFT(to state 30)] [term 17:SHIFT(to state 20)]
 [term 18:SHIFT(to state 102)] [term 19:SHIFT(to state 23)]
 [term 26:SHIFT(to state 27)] [term 43:SHIFT(to state 99)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #147
 [term 4:REDUCE(with prod 24)] [term 7:REDUCE(with prod 24)]
 [term 31:REDUCE(with prod 24)]
From state #148
 [term 32:SHIFT(to state 149)]
From state #149
 [term 19:SHIFT(to state 15)] [term 20:SHIFT(to state 14)]
 [term 21:SHIFT(to state 11)] [term 22:SHIFT(to state 13)]
 [term 23:SHIFT(to state 8)] [term 24:SHIFT(to state 10)]
 [term 26:SHIFT(to state 9)]
From state #150
 [term 1:SHIFT(to state 103)] [term 5:SHIFT(to state 100)]
 [term 8:SHIFT(to state 95)] [term 10:SHIFT(to state 106)]
 [term 11:SHIFT(to state 96)] [term 15:SHIFT(to state 98)]
 [term 16:SHIFT(to state 30)] [term 17:SHIFT(to state 20)]
 [term 18:SHIFT(to state 102)] [term 19:SHIFT(to state 23)]
 [term 26:SHIFT(to state 27)] [term 43:SHIFT(to state 99)]
 [term 45:SHIFT(to state 19)] [term 49:SHIFT(to state 21)]
 [term 50:SHIFT(to state 18)] [term 51:SHIFT(to state 25)]
 [term 52:SHIFT(to state 24)] [term 53:SHIFT(to state 26)]
From state #151
 [term 4:SHIFT(to state 152)]
From state #152
 [term 0:REDUCE(with prod 6)] [term 2:REDUCE(with prod 6)]
From state #153
 [term 19:SHIFT(to state 15)] [term 20:SHIFT(to state 14)]
 [term 21:SHIFT(to state 11)] [term 22:SHIFT(to state 13)]
 [term 23:SHIFT(to state 8)] [term 24:SHIFT(to state 10)]
 [term 26:SHIFT(to state 9)]
From state #154
 [term 25:REDUCE(with prod 9)] [term 30:SHIFT(to state 155)]
From state #155
 [term 18:SHIFT(to state 89)]
From state #156
 [term 25:REDUCE(with prod 8)]
From state #157
 [term 0:REDUCE(with prod 4)]
From state #158
 [term 0:REDUCE(with prod 1)]
------------------------------
-------- REDUCE_TABLE --------
From state #0
 [non term 0->state 1] [non term 1->state 2]
From state #1
From state #2
 [non term 2->state 85] [non term 3->state 84]
From state #3
 [non term 5->state 5]
From state #4
From state #5
From state #6
From state #7
 [non term 7->state 12]
From state #8
From state #9
 [non term 7->state 82]
From state #10
 [non term 7->state 73] [non term 8->state 72]
From state #11
From state #12
 [non term 6->state 16]
From state #13
From state #14
From state #15
From state #16
From state #17
 [non term 13->state 22]
From state #18
From state #19
 [non term 13->state 69]
From state #20
 [non term 13->state 68]
From state #21
From state #22
From state #23
From state #24
From state #25
From state #26
From state #27
From state #28
From state #29
From state #30
 [non term 13->state 31]
From state #31
From state #32
 [non term 13->state 58]
From state #33
 [non term 13->state 57]
From state #34
 [non term 13->state 55]
From state #35
 [non term 13->state 54]
From state #36
 [non term 13->state 53]
From state #37
 [non term 13->state 52]
From state #38
 [non term 13->state 51]
From state #39
 [non term 13->state 50]
From state #40
 [non term 13->state 49]
From state #41
 [non term 13->state 48]
From state #42
 [non term 13->state 47]
From state #43
 [non term 13->state 46]
From state #44
 [non term 13->state 45]
From state #45
From state #46
From state #47
From state #48
From state #49
From state #50
From state #51
From state #52
From state #53
From state #54
From state #55
From state #56
From state #57
From state #58
From state #59
 [non term 12->state 61] [non term 13->state 60]
From state #60
From state #61
From state #62
From state #63
 [non term 12->state 64] [non term 13->state 60]
From state #64
From state #65
From state #66
 [non term 7->state 67]
From state #67
From state #68
From state #69
From state #70
 [non term 5->state 71]
From state #71
From state #72
From state #73
From state #74
From state #75
 [non term 7->state 76]
From state #76
From state #77
 [non term 7->state 73] [non term 8->state 78]
From state #78
From state #79
From state #80
 [non term 7->state 81]
From state #81
From state #82
From state #83
From state #84
 [non term 2->state 157] [non term 3->state 84]
From state #85
From state #86
From state #87
From state #88
 [non term 4->state 90]
From state #89
From state #90
From state #91
From state #92
 [non term 7->state 93]
From state #93
 [non term 9->state 97] [non term 10->state 94] [non term 11->state 105]
 [non term 12->state 104] [non term 13->state 101]
From state #94
From state #95
 [non term 13->state 142]
From state #96
 [non term 5->state 138]
From state #97
From state #98
 [non term 13->state 136]
From state #99
From state #100
 [non term 13->state 130]
From state #101
From state #102
From state #103
From state #104
From state #105
From state #106
From state #107
From state #108
 [non term 13->state 109]
From state #109
From state #110
 [non term 13->state 111]
From state #111
From state #112
 [non term 9->state 113] [non term 10->state 94] [non term 11->state 105]
 [non term 12->state 104] [non term 13->state 101]
From state #113
From state #114
From state #115
From state #116
From state #117
 [non term 11->state 124]
From state #118
 [non term 12->state 121] [non term 13->state 60]
From state #119
 [non term 13->state 120]
From state #120
From state #121
From state #122
From state #123
From state #124
From state #125
 [non term 13->state 126]
From state #126
From state #127
From state #128
 [non term 13->state 129]
From state #129
From state #130
From state #131
 [non term 9->state 132] [non term 10->state 94] [non term 11->state 105]
 [non term 12->state 104] [non term 13->state 101]
From state #132
From state #133
 [non term 9->state 134] [non term 10->state 94] [non term 11->state 105]
 [non term 12->state 104] [non term 13->state 101]
From state #134
From state #135
From state #136
From state #137
From state #138
From state #139
 [non term 9->state 140] [non term 10->state 94] [non term 11->state 105]
 [non term 12->state 104] [non term 13->state 101]
From state #140
From state #141
From state #142
From state #143
 [non term 9->state 144] [non term 10->state 94] [non term 11->state 105]
 [non term 12->state 104] [non term 13->state 101]
From state #144
From state #145
From state #146
 [non term 9->state 147] [non term 10->state 94] [non term 11->state 105]
 [non term 12->state 104] [non term 13->state 101]
From state #147
From state #148
From state #149
 [non term 7->state 150]
From state #150
 [non term 9->state 151] [non term 10->state 94] [non term 11->state 105]
 [non term 12->state 104] [non term 13->state 101]
From state #151
From state #152
From state #153
 [non term 7->state 154]
From state #154
From state #155
 [non term 4->state 156]
From state #156
From state #157
From state #158
-----------------------------
------- CUP v0.11b 20160615 (GIT 4ac7450) Parser Generation Summary -------
  0 errors and 4 warnings
  54 terminals, 14 non-terminals, and 69 productions declared, 
  producing 159 unique parse states.
  1 terminal declared but not used.
  0 non-terminal declared but not used.
  0 productions never reduced.
  3 conflicts detected (5 expected).
  Code written to "Parser.java", and "ParserSym.java".
---------------------------------------------------- (CUP v0.11b 20160615 (GIT 4ac7450))
