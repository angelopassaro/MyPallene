
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.passaro.mypallene.core;

import com.passaro.mypallene.syntax.*;
import com.passaro.mypallene.syntax.expression.*;
import com.passaro.mypallene.syntax.expression.binaryexpr.arithop.DivOp;
import com.passaro.mypallene.syntax.expression.binaryexpr.arithop.MinusOp;
import com.passaro.mypallene.syntax.expression.binaryexpr.arithop.PlusOp;
import com.passaro.mypallene.syntax.expression.binaryexpr.arithop.TimesOp;
import com.passaro.mypallene.syntax.expression.binaryexpr.relop.*;
import com.passaro.mypallene.syntax.expression.unaryexpr.NotExpression;
import com.passaro.mypallene.syntax.expression.unaryexpr.SharpExpression;
import com.passaro.mypallene.syntax.expression.unaryexpr.UMinusExpression;
import com.passaro.mypallene.syntax.function.ComplexDefFun;
import com.passaro.mypallene.syntax.function.Function;
import com.passaro.mypallene.syntax.function.SimpleDefFun;
import com.passaro.mypallene.syntax.statement.*;
import com.passaro.mypallene.syntax.typedenoter.ArrayTypeDenoter;
import com.passaro.mypallene.syntax.typedenoter.FunctionTypeDenoter;
import com.passaro.mypallene.syntax.typedenoter.PrimitiveTypeDenoter;
import com.passaro.mypallene.syntax.typedenoter.TypeDenoter;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;

import java.util.LinkedList;
import java.util.List;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

    public final Class getSymbolContainer() {
        return ParserSym.class;
    }

    /** Default constructor. */
    @Deprecated
    public Parser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    @Deprecated
    public Parser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /** Constructor which sets the default scanner. */
    public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /** Production table. */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\111\000\002\002\004\000\002\002\004\000\002\003" +
                            "\005\000\002\003\002\000\002\004\004\000\002\004\003" +
                            "\000\002\005\013\000\002\005\012\000\002\006\007\000" +
                            "\002\006\005\000\002\007\010\000\002\007\006\000\002" +
                            "\010\004\000\002\010\002\000\002\011\003\000\002\011" +
                            "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
                            "\000\002\011\005\000\002\011\007\000\002\011\006\000" +
                            "\002\012\005\000\002\012\003\000\002\013\005\000\002" +
                            "\013\003\000\002\013\003\000\002\014\003\000\002\014" +
                            "\007\000\002\014\011\000\002\014\007\000\002\014\013" +
                            "\000\002\014\007\000\002\014\005\000\002\014\010\000" +
                            "\002\014\006\000\002\014\005\000\002\014\004\000\002" +
                            "\014\004\000\002\014\004\000\002\014\003\000\002\015" +
                            "\005\000\002\015\003\000\002\016\005\000\002\016\003" +
                            "\000\002\017\003\000\002\017\010\000\002\017\003\000" +
                            "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
                            "\017\003\000\002\017\006\000\002\017\003\000\002\017" +
                            "\006\000\002\017\006\000\002\017\005\000\002\017\005" +
                            "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
                            "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
                            "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
                            "\005\000\002\017\005\000\002\017\004\000\002\017\004" +
                            "\000\002\017\004\000\002\017\003"});

    /** Access to production table. */
    public short[][] production_table() {
        return _production_table;
    }

    /** Parse-action table. */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\254\000\006\004\ufffe\016\006\001\002\000\004\002" +
                            "\256\001\002\000\004\004\143\001\002\000\004\024\007" +
                            "\001\002\000\004\043\136\001\002\000\006\006\012\042" +
                            "\011\001\002\000\004\024\013\001\002\000\004\004\uffff" +
                            "\001\002\000\004\043\014\001\002\000\020\026\024\027" +
                            "\023\030\020\031\022\032\015\033\017\035\016\001\002" +
                            "\000\126\003\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012" +
                            "\uffef\013\uffef\014\uffef\015\uffef\020\uffef\021\uffef\022\uffef" +
                            "\023\uffef\024\uffef\025\uffef\026\uffef\034\uffef\035\uffef\036" +
                            "\uffef\037\uffef\040\uffef\041\uffef\042\uffef\044\uffef\045\uffef" +
                            "\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\055" +
                            "\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef\064\uffef" +
                            "\065\uffef\066\uffef\067\uffef\070\uffef\001\002\000\020\026" +
                            "\024\027\023\030\020\031\022\032\015\033\017\035\016" +
                            "\001\002\000\022\026\024\027\023\030\020\031\022\032" +
                            "\015\033\017\034\124\035\016\001\002\000\126\003\ufff1" +
                            "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014" +
                            "\ufff1\015\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1" +
                            "\025\ufff1\026\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040" +
                            "\ufff1\041\ufff1\042\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1" +
                            "\050\ufff1\051\ufff1\052\ufff1\053\ufff1\055\ufff1\056\ufff1\057" +
                            "\ufff1\060\ufff1\061\ufff1\062\ufff1\064\ufff1\065\ufff1\066\ufff1" +
                            "\067\ufff1\070\ufff1\001\002\000\010\006\ufff4\042\ufff4\055" +
                            "\026\001\002\000\126\003\ufff0\006\ufff0\007\ufff0\010\ufff0" +
                            "\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\020\ufff0\021" +
                            "\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\034\ufff0" +
                            "\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\044" +
                            "\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0" +
                            "\053\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062" +
                            "\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\001\002" +
                            "\000\126\003\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012" +
                            "\ufff2\013\ufff2\014\ufff2\015\ufff2\020\ufff2\021\ufff2\022\ufff2" +
                            "\023\ufff2\024\ufff2\025\ufff2\026\ufff2\034\ufff2\035\ufff2\036" +
                            "\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\044\ufff2\045\ufff2" +
                            "\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\055" +
                            "\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\064\ufff2" +
                            "\065\ufff2\066\ufff2\067\ufff2\070\ufff2\001\002\000\126\003" +
                            "\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3" +
                            "\014\ufff3\015\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024" +
                            "\ufff3\025\ufff3\026\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3" +
                            "\040\ufff3\041\ufff3\042\ufff3\044\ufff3\045\ufff3\046\ufff3\047" +
                            "\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\055\ufff3\056\ufff3" +
                            "\057\ufff3\060\ufff3\061\ufff3\062\ufff3\064\ufff3\065\ufff3\066" +
                            "\ufff3\067\ufff3\070\ufff3\001\002\000\006\006\ufff7\042\ufff7" +
                            "\001\002\000\034\003\043\022\044\023\031\024\042\025" +
                            "\032\026\035\035\041\060\027\064\033\065\030\066\037" +
                            "\067\036\070\040\001\002\000\034\003\043\022\044\023" +
                            "\031\024\042\025\032\026\035\035\041\060\027\064\033" +
                            "\065\030\066\037\067\036\070\040\001\002\000\056\006" +
                            "\uffcf\010\uffcf\011\uffcf\013\uffcf\020\uffcf\034\uffcf\037\uffcf" +
                            "\040\uffcf\041\uffcf\042\uffcf\044\uffcf\045\uffcf\046\uffcf\047" +
                            "\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\057\uffcf\060\uffcf" +
                            "\061\uffcf\062\uffcf\001\002\000\034\003\043\022\044\023" +
                            "\031\024\042\025\032\026\035\035\041\060\027\064\033" +
                            "\065\030\066\037\067\036\070\040\001\002\000\004\033" +
                            "\113\001\002\000\056\006\uffd0\010\uffd0\011\uffd0\013\uffd0" +
                            "\020\uffd0\034\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\044" +
                            "\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0" +
                            "\053\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\001\002\000" +
                            "\040\006\ufff5\037\050\042\ufff5\044\047\045\062\046\061" +
                            "\047\054\050\052\051\060\052\056\053\051\057\053\060" +
                            "\046\061\057\062\055\001\002\000\056\006\uffd4\010\uffd4" +
                            "\011\uffd4\013\uffd4\020\uffd4\034\uffd4\037\uffd4\040\uffd4\041" +
                            "\uffd4\042\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4" +
                            "\051\uffd4\052\uffd4\053\uffd4\057\uffd4\060\uffd4\061\uffd4\062" +
                            "\uffd4\001\002\000\056\006\uffd2\010\uffd2\011\uffd2\013\uffd2" +
                            "\020\uffd2\034\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\044" +
                            "\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2" +
                            "\053\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\001\002\000" +
                            "\056\006\uffce\010\uffce\011\uffce\013\uffce\020\uffce\034\uffce" +
                            "\037\uffce\040\uffce\041\uffce\042\uffce\044\uffce\045\uffce\046" +
                            "\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\057\uffce" +
                            "\060\uffce\061\uffce\062\uffce\001\002\000\056\006\uffd1\010" +
                            "\uffd1\011\uffd1\013\uffd1\020\uffd1\034\uffd1\037\uffd1\040\uffd1" +
                            "\041\uffd1\042\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050" +
                            "\uffd1\051\uffd1\052\uffd1\053\uffd1\057\uffd1\060\uffd1\061\uffd1" +
                            "\062\uffd1\001\002\000\004\036\110\001\002\000\060\006" +
                            "\uffcc\010\uffcc\011\uffcc\013\uffcc\020\uffcc\033\101\034\uffcc" +
                            "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\044\uffcc\045\uffcc\046" +
                            "\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\057\uffcc" +
                            "\060\uffcc\061\uffcc\062\uffcc\001\002\000\056\006\uffb9\010" +
                            "\uffb9\011\uffb9\013\uffb9\020\uffb9\034\uffb9\037\uffb9\040\uffb9" +
                            "\041\uffb9\042\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050" +
                            "\uffb9\051\uffb9\052\uffb9\053\uffb9\057\uffb9\060\uffb9\061\uffb9" +
                            "\062\uffb9\001\002\000\034\003\043\022\044\023\031\024" +
                            "\042\025\032\026\035\035\041\060\027\064\033\065\030" +
                            "\066\037\067\036\070\040\001\002\000\056\006\uffbb\010" +
                            "\uffbb\011\uffbb\013\uffbb\020\uffbb\034\uffbb\037\uffbb\040\uffbb" +
                            "\041\uffbb\042\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050" +
                            "\uffbb\051\uffbb\052\uffbb\053\uffbb\057\uffbb\060\uffbb\061\uffbb" +
                            "\062\uffbb\001\002\000\034\003\043\022\044\023\031\024" +
                            "\042\025\032\026\035\035\041\060\027\064\033\065\030" +
                            "\066\037\067\036\070\040\001\002\000\034\003\043\022" +
                            "\044\023\031\024\042\025\032\026\035\035\041\060\027" +
                            "\064\033\065\030\066\037\067\036\070\040\001\002\000" +
                            "\034\003\043\022\044\023\031\024\042\025\032\026\035" +
                            "\035\041\060\027\064\033\065\030\066\037\067\036\070" +
                            "\040\001\002\000\034\003\043\022\044\023\031\024\042" +
                            "\025\032\026\035\035\041\060\027\064\033\065\030\066" +
                            "\037\067\036\070\040\001\002\000\034\003\043\022\044" +
                            "\023\031\024\042\025\032\026\035\035\041\060\027\064" +
                            "\033\065\030\066\037\067\036\070\040\001\002\000\034" +
                            "\003\043\022\044\023\031\024\042\025\032\026\035\035" +
                            "\041\060\027\064\033\065\030\066\037\067\036\070\040" +
                            "\001\002\000\034\003\043\022\044\023\031\024\042\025" +
                            "\032\026\035\035\041\060\027\064\033\065\030\066\037" +
                            "\067\036\070\040\001\002\000\034\003\043\022\044\023" +
                            "\031\024\042\025\032\026\035\035\041\060\027\064\033" +
                            "\065\030\066\037\067\036\070\040\001\002\000\034\003" +
                            "\043\022\044\023\031\024\042\025\032\026\035\035\041" +
                            "\060\027\064\033\065\030\066\037\067\036\070\040\001" +
                            "\002\000\034\003\043\022\044\023\031\024\042\025\032" +
                            "\026\035\035\041\060\027\064\033\065\030\066\037\067" +
                            "\036\070\040\001\002\000\034\003\043\022\044\023\031" +
                            "\024\042\025\032\026\035\035\041\060\027\064\033\065" +
                            "\030\066\037\067\036\070\040\001\002\000\034\003\043" +
                            "\022\044\023\031\024\042\025\032\026\035\035\041\060" +
                            "\027\064\033\065\030\066\037\067\036\070\040\001\002" +
                            "\000\034\003\043\022\044\023\031\024\042\025\032\026" +
                            "\035\035\041\060\027\064\033\065\030\066\037\067\036" +
                            "\070\040\001\002\000\056\006\uffc3\010\uffc3\011\uffc3\013" +
                            "\uffc3\020\uffc3\034\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3" +
                            "\044\047\045\uffc3\046\061\047\054\050\052\051\060\052" +
                            "\056\053\051\057\uffc3\060\uffc3\061\057\062\055\001\002" +
                            "\000\042\006\uffc0\010\uffc0\011\uffc0\013\uffc0\020\uffc0\034" +
                            "\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\044\uffc0\045\uffc0" +
                            "\057\uffc0\060\uffc0\061\uffc0\062\uffc0\001\002\000\042\006" +
                            "\uffbd\010\uffbd\011\uffbd\013\uffbd\020\uffbd\034\uffbd\037\uffbd" +
                            "\040\uffbd\041\uffbd\042\uffbd\044\uffbd\045\uffbd\057\uffbd\060" +
                            "\uffbd\061\uffbd\062\uffbd\001\002\000\056\006\uffc6\010\uffc6" +
                            "\011\uffc6\013\uffc6\020\uffc6\034\uffc6\037\uffc6\040\uffc6\041" +
                            "\uffc6\042\uffc6\044\uffc6\045\uffc6\046\061\047\054\050\052" +
                            "\051\060\052\056\053\051\057\uffc6\060\uffc6\061\uffc6\062" +
                            "\uffc6\001\002\000\042\006\uffc2\010\uffc2\011\uffc2\013\uffc2" +
                            "\020\uffc2\034\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\044" +
                            "\uffc2\045\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\001\002" +
                            "\000\056\006\uffc5\010\uffc5\011\uffc5\013\uffc5\020\uffc5\034" +
                            "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\044\uffc5\045\uffc5" +
                            "\046\061\047\054\050\052\051\060\052\056\053\051\057" +
                            "\uffc5\060\uffc5\061\uffc5\062\uffc5\001\002\000\042\006\uffbf" +
                            "\010\uffbf\011\uffbf\013\uffbf\020\uffbf\034\uffbf\037\uffbf\040" +
                            "\uffbf\041\uffbf\042\uffbf\044\uffbf\045\uffbf\057\uffbf\060\uffbf" +
                            "\061\uffbf\062\uffbf\001\002\000\056\006\uffc8\010\uffc8\011" +
                            "\uffc8\013\uffc8\020\uffc8\034\uffc8\037\uffc8\040\uffc8\041\uffc8" +
                            "\042\uffc8\044\047\045\uffc8\046\061\047\054\050\052\051" +
                            "\060\052\056\053\051\057\uffc8\060\uffc8\061\057\062\055" +
                            "\001\002\000\042\006\uffbe\010\uffbe\011\uffbe\013\uffbe\020" +
                            "\uffbe\034\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\044\uffbe" +
                            "\045\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\001\002\000" +
                            "\042\006\uffc1\010\uffc1\011\uffc1\013\uffc1\020\uffc1\034\uffc1" +
                            "\037\uffc1\040\uffc1\041\uffc1\042\uffc1\044\uffc1\045\uffc1\057" +
                            "\uffc1\060\uffc1\061\uffc1\062\uffc1\001\002\000\036\037\050" +
                            "\040\076\044\047\045\062\046\061\047\054\050\052\051" +
                            "\060\052\056\053\051\057\053\060\046\061\057\062\055" +
                            "\001\002\000\056\006\uffcb\010\uffcb\011\uffcb\013\uffcb\020" +
                            "\uffcb\034\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\044\uffcb" +
                            "\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053" +
                            "\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\001\002\000\056" +
                            "\006\uffc4\010\uffc4\011\uffc4\013\uffc4\020\uffc4\034\uffc4\037" +
                            "\uffc4\040\uffc4\041\uffc4\042\uffc4\044\uffc4\045\uffc4\046\061" +
                            "\047\054\050\052\051\060\052\056\053\051\057\uffc4\060" +
                            "\uffc4\061\uffc4\062\uffc4\001\002\000\056\006\uffc7\010\uffc7" +
                            "\011\uffc7\013\uffc7\020\uffc7\034\uffc7\037\uffc7\040\uffc7\041" +
                            "\uffc7\042\uffc7\044\047\045\uffc7\046\061\047\054\050\052" +
                            "\051\060\052\056\053\051\057\uffc7\060\uffc7\061\057\062" +
                            "\055\001\002\000\036\003\043\022\044\023\031\024\042" +
                            "\025\032\026\035\034\104\035\041\060\027\064\033\065" +
                            "\030\066\037\067\036\070\040\001\002\000\042\020\uffd5" +
                            "\034\uffd5\037\050\041\106\044\047\045\062\046\061\047" +
                            "\054\050\052\051\060\052\056\053\051\057\053\060\046" +
                            "\061\057\062\055\001\002\000\004\034\105\001\002\000" +
                            "\056\006\uffc9\010\uffc9\011\uffc9\013\uffc9\020\uffc9\034\uffc9" +
                            "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\044\uffc9\045\uffc9\046" +
                            "\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\057\uffc9" +
                            "\060\uffc9\061\uffc9\062\uffc9\001\002\000\056\006\uffca\010" +
                            "\uffca\011\uffca\013\uffca\020\uffca\034\uffca\037\uffca\040\uffca" +
                            "\041\uffca\042\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050" +
                            "\uffca\051\uffca\052\uffca\053\uffca\057\uffca\060\uffca\061\uffca" +
                            "\062\uffca\001\002\000\034\003\043\022\044\023\031\024" +
                            "\042\025\032\026\035\035\041\060\027\064\033\065\030" +
                            "\066\037\067\036\070\040\001\002\000\006\020\uffd6\034" +
                            "\uffd6\001\002\000\004\043\111\001\002\000\020\026\024" +
                            "\027\023\030\020\031\022\032\015\033\017\035\016\001" +
                            "\002\000\056\006\uffcd\010\uffcd\011\uffcd\013\uffcd\020\uffcd" +
                            "\034\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\044\uffcd\045" +
                            "\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd" +
                            "\057\uffcd\060\uffcd\061\uffcd\062\uffcd\001\002\000\004\024" +
                            "\114\001\002\000\004\041\115\001\002\000\034\003\043" +
                            "\022\044\023\031\024\042\025\032\026\035\035\041\060" +
                            "\027\064\033\065\030\066\037\067\036\070\040\001\002" +
                            "\000\004\034\117\001\002\000\056\006\uffd3\010\uffd3\011" +
                            "\uffd3\013\uffd3\020\uffd3\034\uffd3\037\uffd3\040\uffd3\041\uffd3" +
                            "\042\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051" +
                            "\uffd3\052\uffd3\053\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3" +
                            "\001\002\000\056\006\uffba\010\uffba\011\uffba\013\uffba\020" +
                            "\uffba\034\uffba\037\uffba\040\uffba\041\uffba\042\uffba\044\uffba" +
                            "\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053" +
                            "\uffba\057\uffba\060\uffba\061\uffba\062\uffba\001\002\000\056" +
                            "\006\uffbc\010\uffbc\011\uffbc\013\uffbc\020\uffbc\034\uffbc\037" +
                            "\uffbc\040\uffbc\041\uffbc\042\uffbc\044\uffbc\045\uffbc\046\uffbc" +
                            "\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\057\uffbc\060" +
                            "\uffbc\061\uffbc\062\uffbc\001\002\000\004\034\131\001\002" +
                            "\000\006\034\uffea\041\127\001\002\000\004\054\125\001" +
                            "\002\000\020\026\024\027\023\030\020\031\022\032\015" +
                            "\033\017\035\016\001\002\000\126\003\uffec\006\uffec\007" +
                            "\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec" +
                            "\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026" +
                            "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
                            "\042\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051" +
                            "\uffec\052\uffec\053\uffec\055\uffec\056\uffec\057\uffec\060\uffec" +
                            "\061\uffec\062\uffec\064\uffec\065\uffec\066\uffec\067\uffec\070" +
                            "\uffec\001\002\000\020\026\024\027\023\030\020\031\022" +
                            "\032\015\033\017\035\016\001\002\000\004\034\uffeb\001" +
                            "\002\000\004\054\132\001\002\000\020\026\024\027\023" +
                            "\030\020\031\022\032\015\033\017\035\016\001\002\000" +
                            "\126\003\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed" +
                            "\013\uffed\014\uffed\015\uffed\020\uffed\021\uffed\022\uffed\023" +
                            "\uffed\024\uffed\025\uffed\026\uffed\034\uffed\035\uffed\036\uffed" +
                            "\037\uffed\040\uffed\041\uffed\042\uffed\044\uffed\045\uffed\046" +
                            "\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\055\uffed" +
                            "\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed\064\uffed\065" +
                            "\uffed\066\uffed\067\uffed\070\uffed\001\002\000\004\036\135" +
                            "\001\002\000\126\003\uffee\006\uffee\007\uffee\010\uffee\011" +
                            "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\020\uffee\021\uffee" +
                            "\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\034\uffee\035" +
                            "\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\044\uffee" +
                            "\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053" +
                            "\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee" +
                            "\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee\001\002\000" +
                            "\020\026\024\027\023\030\020\031\022\032\015\033\017" +
                            "\035\016\001\002\000\010\006\ufff4\042\ufff4\055\026\001" +
                            "\002\000\006\006\ufff6\042\ufff6\001\002\000\006\002\ufffc" +
                            "\004\143\001\002\000\004\002\001\001\002\000\004\024" +
                            "\144\001\002\000\004\033\145\001\002\000\006\024\146" +
                            "\034\150\001\002\000\004\043\251\001\002\000\004\034" +
                            "\244\001\002\000\004\043\151\001\002\000\020\026\024" +
                            "\027\023\030\020\031\022\032\015\033\017\035\016\001" +
                            "\002\000\050\003\164\007\161\012\154\014\167\015\155" +
                            "\021\157\022\044\023\031\024\163\025\032\026\035\035" +
                            "\041\056\160\060\027\064\033\065\030\066\037\067\036" +
                            "\070\040\001\002\000\010\006\uffe8\011\uffe8\042\242\001" +
                            "\002\000\034\003\043\022\044\023\031\024\042\025\032" +
                            "\026\035\035\041\060\027\064\033\065\030\066\037\067" +
                            "\036\070\040\001\002\000\004\024\007\001\002\000\004" +
                            "\006\230\001\002\000\034\003\043\022\044\023\031\024" +
                            "\042\025\032\026\035\035\041\060\027\064\033\065\030" +
                            "\066\037\067\036\070\040\001\002\000\010\006\uffe6\011" +
                            "\uffe6\042\uffe6\001\002\000\034\003\043\022\044\023\031" +
                            "\024\042\025\032\026\035\035\041\060\027\064\033\065" +
                            "\030\066\037\067\036\070\040\001\002\000\040\020\uffd5" +
                            "\037\213\041\106\044\047\045\062\046\061\047\054\050" +
                            "\052\051\060\052\056\053\051\057\053\060\046\061\057" +
                            "\062\055\001\002\000\046\017\uffd7\020\uffcc\033\203\037" +
                            "\uffcc\041\202\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc" +
                            "\051\uffcc\052\uffcc\053\uffcc\055\204\057\uffcc\060\uffcc\061" +
                            "\uffcc\062\uffcc\001\002\000\046\006\uffd9\011\uffd9\020\uffb9" +
                            "\037\uffb9\041\uffb9\042\uffd9\044\uffb9\045\uffb9\046\uffb9\047" +
                            "\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\057\uffb9\060\uffb9" +
                            "\061\uffb9\062\uffb9\001\002\000\004\020\201\001\002\000" +
                            "\004\017\200\001\002\000\004\024\170\001\002\000\004" +
                            "\055\171\001\002\000\034\003\043\022\044\023\031\024" +
                            "\042\025\032\026\035\035\041\060\027\064\033\065\030" +
                            "\066\037\067\036\070\040\001\002\000\036\037\050\041" +
                            "\173\044\047\045\062\046\061\047\054\050\052\051\060" +
                            "\052\056\053\051\057\053\060\046\061\057\062\055\001" +
                            "\002\000\034\003\043\022\044\023\031\024\042\025\032" +
                            "\026\035\035\041\060\027\064\033\065\030\066\037\067" +
                            "\036\070\040\001\002\000\036\013\175\037\050\044\047" +
                            "\045\062\046\061\047\054\050\052\051\060\052\056\053" +
                            "\051\057\053\060\046\061\057\062\055\001\002\000\050" +
                            "\003\164\007\161\012\154\014\167\015\155\021\157\022" +
                            "\044\023\031\024\163\025\032\026\035\035\041\056\160" +
                            "\060\027\064\033\065\030\066\037\067\036\070\040\001" +
                            "\002\000\004\006\177\001\002\000\010\006\uffe2\011\uffe2" +
                            "\042\uffe2\001\002\000\010\006\uffdc\011\uffdc\042\uffdc\001" +
                            "\002\000\010\006\uffdb\011\uffdb\042\uffdb\001\002\000\004" +
                            "\024\211\001\002\000\036\003\043\022\044\023\031\024" +
                            "\042\025\032\026\035\034\207\035\041\060\027\064\033" +
                            "\065\030\066\037\067\036\070\040\001\002\000\034\003" +
                            "\043\022\044\023\031\024\042\025\032\026\035\035\041" +
                            "\060\027\064\033\065\030\066\037\067\036\070\040\001" +
                            "\002\000\042\006\uffe0\011\uffe0\037\050\042\uffe0\044\047" +
                            "\045\062\046\061\047\054\050\052\051\060\052\056\053" +
                            "\051\057\053\060\046\061\057\062\055\001\002\000\004" +
                            "\034\210\001\002\000\046\006\uffdd\011\uffdd\020\uffc9\037" +
                            "\uffc9\041\uffc9\042\uffdd\044\uffc9\045\uffc9\046\uffc9\047\uffc9" +
                            "\050\uffc9\051\uffc9\052\uffc9\053\uffc9\057\uffc9\060\uffc9\061" +
                            "\uffc9\062\uffc9\001\002\000\046\006\uffde\011\uffde\020\uffca" +
                            "\037\uffca\041\uffca\042\uffde\044\uffca\045\uffca\046\uffca\047" +
                            "\uffca\050\uffca\051\uffca\052\uffca\053\uffca\057\uffca\060\uffca" +
                            "\061\uffca\062\uffca\001\002\000\006\017\uffd7\041\202\001" +
                            "\002\000\004\017\uffd8\001\002\000\034\003\043\022\044" +
                            "\023\031\024\042\025\032\026\035\035\041\060\027\064" +
                            "\033\065\030\066\037\067\036\070\040\001\002\000\036" +
                            "\037\050\040\215\044\047\045\062\046\061\047\054\050" +
                            "\052\051\060\052\056\053\051\057\053\060\046\061\057" +
                            "\062\055\001\002\000\042\020\uffcb\037\uffcb\041\uffcb\044" +
                            "\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb" +
                            "\053\uffcb\055\216\057\uffcb\060\uffcb\061\uffcb\062\uffcb\001" +
                            "\002\000\034\003\043\022\044\023\031\024\042\025\032" +
                            "\026\035\035\041\060\027\064\033\065\030\066\037\067" +
                            "\036\070\040\001\002\000\042\006\uffdf\011\uffdf\037\050" +
                            "\042\uffdf\044\047\045\062\046\061\047\054\050\052\051" +
                            "\060\052\056\053\051\057\053\060\046\061\057\062\055" +
                            "\001\002\000\036\010\221\037\050\044\047\045\062\046" +
                            "\061\047\054\050\052\051\060\052\056\053\051\057\053" +
                            "\060\046\061\057\062\055\001\002\000\050\003\164\007" +
                            "\161\012\154\014\167\015\155\021\157\022\044\023\031" +
                            "\024\163\025\032\026\035\035\041\056\160\060\027\064" +
                            "\033\065\030\066\037\067\036\070\040\001\002\000\006" +
                            "\006\224\011\223\001\002\000\050\003\164\007\161\012" +
                            "\154\014\167\015\155\021\157\022\044\023\031\024\163" +
                            "\025\032\026\035\035\041\056\160\060\027\064\033\065" +
                            "\030\066\037\067\036\070\040\001\002\000\010\006\uffe3" +
                            "\011\uffe3\042\uffe3\001\002\000\004\006\226\001\002\000" +
                            "\010\006\uffe4\011\uffe4\042\uffe4\001\002\000\042\006\uffda" +
                            "\011\uffda\037\050\042\uffda\044\047\045\062\046\061\047" +
                            "\054\050\052\051\060\052\056\053\051\057\053\060\046" +
                            "\061\057\062\055\001\002\000\006\002\ufffa\004\ufffa\001" +
                            "\002\000\004\042\232\001\002\000\050\003\164\007\161" +
                            "\012\154\014\167\015\155\021\157\022\044\023\031\024" +
                            "\234\025\032\026\035\035\041\056\160\060\027\064\033" +
                            "\065\030\066\037\067\036\070\040\001\002\000\004\006" +
                            "\235\001\002\000\050\017\uffd7\020\uffcc\033\203\037\uffcc" +
                            "\041\202\043\014\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050" +
                            "\uffcc\051\uffcc\052\uffcc\053\uffcc\055\204\057\uffcc\060\uffcc" +
                            "\061\uffcc\062\uffcc\001\002\000\010\006\uffe1\011\uffe1\042" +
                            "\uffe1\001\002\000\036\013\237\037\050\044\047\045\062" +
                            "\046\061\047\054\050\052\051\060\052\056\053\051\057" +
                            "\053\060\046\061\057\062\055\001\002\000\050\003\164" +
                            "\007\161\012\154\014\167\015\155\021\157\022\044\023" +
                            "\031\024\163\025\032\026\035\035\041\056\160\060\027" +
                            "\064\033\065\030\066\037\067\036\070\040\001\002\000" +
                            "\004\006\241\001\002\000\010\006\uffe5\011\uffe5\042\uffe5" +
                            "\001\002\000\050\003\164\007\161\012\154\014\167\015" +
                            "\155\021\157\022\044\023\031\024\163\025\032\026\035" +
                            "\035\041\056\160\060\027\064\033\065\030\066\037\067" +
                            "\036\070\040\001\002\000\006\006\uffe9\011\uffe9\001\002" +
                            "\000\004\043\245\001\002\000\020\026\024\027\023\030" +
                            "\020\031\022\032\015\033\017\035\016\001\002\000\050" +
                            "\003\164\007\161\012\154\014\167\015\155\021\157\022" +
                            "\044\023\031\024\163\025\032\026\035\035\041\056\160" +
                            "\060\027\064\033\065\030\066\037\067\036\070\040\001" +
                            "\002\000\004\006\250\001\002\000\006\002\ufffb\004\ufffb" +
                            "\001\002\000\020\026\024\027\023\030\020\031\022\032" +
                            "\015\033\017\035\016\001\002\000\006\034\ufff8\041\253" +
                            "\001\002\000\004\024\146\001\002\000\004\034\ufff9\001" +
                            "\002\000\004\002\ufffd\001\002\000\004\002\000\001\002" +
                            ""});

    /** Access to parse-action table. */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\254\000\006\002\003\003\004\001\001\000\002\001" +
                            "\001\000\006\004\141\005\140\001\001\000\004\007\007" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\011\020" +
                            "\001\001\000\002\001\001\000\004\011\133\001\001\000" +
                            "\006\011\122\012\121\001\001\000\002\001\001\000\004" +
                            "\010\024\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\004\017\033\001\001" +
                            "\000\004\017\120\001\001\000\002\001\001\000\004\017" +
                            "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\017\044\001\001\000\002\001" +
                            "\001\000\004\017\077\001\001\000\004\017\076\001\001" +
                            "\000\004\017\074\001\001\000\004\017\073\001\001\000" +
                            "\004\017\072\001\001\000\004\017\071\001\001\000\004" +
                            "\017\070\001\001\000\004\017\067\001\001\000\004\017" +
                            "\066\001\001\000\004\017\065\001\001\000\004\017\064" +
                            "\001\001\000\004\017\063\001\001\000\004\017\062\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\006\016\102\017\101\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\006\016\106\017\101\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\011\111\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
                            "\016\115\017\101\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\011\125\001" +
                            "\001\000\002\001\001\000\006\011\122\012\127\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\011\132\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\011\136\001\001\000\004\010\137\001\001\000" +
                            "\002\001\001\000\006\004\254\005\140\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
                            "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\011\151\001\001\000\014\013\155\014" +
                            "\152\015\165\016\164\017\161\001\001\000\002\001\001" +
                            "\000\004\017\235\001\001\000\004\007\230\001\001\000" +
                            "\002\001\001\000\004\017\226\001\001\000\002\001\001" +
                            "\000\004\017\217\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\017\171\001" +
                            "\001\000\002\001\001\000\004\017\173\001\001\000\002" +
                            "\001\001\000\014\013\175\014\152\015\165\016\164\017" +
                            "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\004\015\211\001\001\000" +
                            "\006\016\205\017\101\001\001\000\004\017\204\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
                            "\017\213\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\017\216\001\001\000\002\001\001\000\002\001\001" +
                            "\000\014\013\221\014\152\015\165\016\164\017\161\001" +
                            "\001\000\002\001\001\000\014\013\224\014\152\015\165" +
                            "\016\164\017\161\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\014\013\232\014\152\015\165\016" +
                            "\164\017\161\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\014\013\237\014" +
                            "\152\015\165\016\164\017\161\001\001\000\002\001\001" +
                            "\000\002\001\001\000\014\013\242\014\152\015\165\016" +
                            "\164\017\161\001\001\000\002\001\001\000\002\001\001" +
                            "\000\004\011\245\001\001\000\014\013\246\014\152\015" +
                            "\165\016\164\017\161\001\001\000\002\001\001\000\002" +
                            "\001\001\000\004\011\251\001\001\000\002\001\001\000" +
                            "\004\006\253\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001"});

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /** Instance of action encapsulation class. */
    protected CUP$Parser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions() {
        action_obj = new CUP$Parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {
        return 0;
    }

    /** Indicates start production. */
    public int start_production() {
        return 1;
    }

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index. */
    public int error_sym() {
        return 1;
    }


    public void report_error(String message, Object info) {
        if (info instanceof ComplexSymbol) {
            ComplexSymbol cs = (ComplexSymbol) info;
            String msg = String.format("%s for input symbol %s spanning from $s to %s", message, cs.getName(), cs.getLeft(), cs.getRight());
            System.err.println(msg);
        } else {
            System.err.println(message);
        }
    }

    protected void syntax_error() {
        List<Integer> ids = this.expected_token_ids();
        LinkedList<String> list = new LinkedList<>();
        ids.forEach(id -> list.add(this.symbl_name_from_id(id)));
        System.err.println("instead expected token classes are " + list);
    }


    /** Cup generated class to encapsulate user supplied action code.*/
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$Parser$actions {
        private final Parser parser;

        /** Constructor */
        CUP$Parser$actions(Parser parser) {
            this.parser = parser;
        }

        /** Method 0 with the actual generated action code for actions 0 to 300. */
        public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
                int CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack CUP$Parser$stack,
                int CUP$Parser$top)
                throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$Parser$result;

            /* select the action based on the action number */
            switch (CUP$Parser$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // Program ::= Global Functions
                {
                    Program RESULT = null;
                    Location globalxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location globalxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Global global = (Global) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location functionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location functionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    LinkedList<Function> functions = (LinkedList<Function>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Program(functionsxleft, functionsxright, global, functions);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // $START ::= Program EOF
                {
                    Object RESULT = null;
                    Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Program start_val = (Program) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = start_val;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Parser$parser.done_parsing();
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // Global ::= GLOBAL Var_decls END
                {
                    Global RESULT = null;
                    Location gxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location gxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    String g = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location varDeclsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location varDeclsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    LinkedList<VarDecl> varDecls = (LinkedList<VarDecl>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new Global(gxleft, gxright, varDecls);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Global", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // Global ::=
                {
                    Global RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Global", 1, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // Functions ::= Def_fun Functions
                {
                    LinkedList<Function> RESULT = null;
                    Location defFunxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location defFunxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Function defFun = (Function) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location functionsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location functionsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    LinkedList<Function> functions = (LinkedList<Function>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    functions.addFirst(defFun);
                    RESULT = functions;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // Functions ::= Def_fun
                {
                    LinkedList<Function> RESULT = null;
                    Location defFunxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location defFunxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Function defFun = (Function) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LinkedList<Function>();
                    RESULT.addFirst(defFun);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions", 2, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // Def_fun ::= FUNCTION ID LPAR Par_decls RPAR COLON TypeDenoter Statements END
                {
                    Function RESULT = null;
                    Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 8)).xleft;
                    Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 8)).xright;
                    String f = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 8)).value;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).xright;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).value;
                    Location parDeclxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).xleft;
                    Location parDeclxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).xright;
                    LinkedList<ParDecl> parDecl = (LinkedList<ParDecl>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    TypeDenoter type = (TypeDenoter) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location statementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location statementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    LinkedList<Statement> statements = (LinkedList<Statement>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new ComplexDefFun(fxleft, fxright, new Variable(idxleft, idxright, id), type, statements, parDecl);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Def_fun", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 8)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // Def_fun ::= FUNCTION ID LPAR RPAR COLON TypeDenoter Statements END
                {
                    Function RESULT = null;
                    Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).xleft;
                    Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).xright;
                    String f = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).value;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).xright;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).value;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    TypeDenoter type = (TypeDenoter) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location statementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location statementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    LinkedList<Statement> statements = (LinkedList<Statement>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new SimpleDefFun(fxleft, fxright, new Variable(idxleft, idxright, id), type, statements);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Def_fun", 3, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // Par_decls ::= ID COLON TypeDenoter COMMA Par_decls
                {
                    LinkedList<ParDecl> RESULT = null;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xright;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    TypeDenoter type = (TypeDenoter) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location parDeclxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location parDeclxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    LinkedList<ParDecl> parDecl = (LinkedList<ParDecl>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    parDecl.addFirst(new ParDecl(idxleft, idxright, new Variable(idxleft, idxright, id), type));
                    RESULT = parDecl;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_decls", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // Par_decls ::= ID COLON TypeDenoter
                {
                    LinkedList<ParDecl> RESULT = null;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    TypeDenoter type = (TypeDenoter) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LinkedList<ParDecl>();
                    RESULT.addFirst(new ParDecl(idxleft, idxright, new Variable(idxleft, idxright, id), type));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Par_decls", 4, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // Var_decls ::= Var_decls SEMI ID COLON TypeDenoter Var_init_value
                {
                    LinkedList<VarDecl> RESULT = null;
                    Location varDeclsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).xleft;
                    Location varDeclsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).xright;
                    LinkedList<VarDecl> varDecls = (LinkedList<VarDecl>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    TypeDenoter type = (TypeDenoter) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location varInitxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location varInitxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    VarInitValue varInit = (VarInitValue) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    varDecls.addLast(new VarDecl(idxleft, idxright, new Variable(idxleft, idxright, id), type, varInit));
                    RESULT = varDecls;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // Var_decls ::= ID COLON TypeDenoter Var_init_value
                {
                    LinkedList<VarDecl> RESULT = null;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    TypeDenoter type = (TypeDenoter) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    Location varInitxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location varInitxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    VarInitValue varInit = (VarInitValue) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LinkedList<VarDecl>();
                    RESULT.addLast(new VarDecl(idxleft, idxright, new Variable(idxleft, idxright, id), type, varInit));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_decls", 5, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // Var_init_value ::= ASSIGN Expr
                {
                    VarInitValue RESULT = null;
                    Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Expr expr = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new VarInitValue(exprxleft, exprxright, expr);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_init_value", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // Var_init_value ::=
                {
                    VarInitValue RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Var_init_value", 6, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // TypeDenoter ::= NIL
                {
                    TypeDenoter RESULT = null;
                    Location nilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location nilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    String nil = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new PrimitiveTypeDenoter(nilxleft, nilxright, "NIL");
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDenoter", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // TypeDenoter ::= INT
                {
                    TypeDenoter RESULT = null;
                    Location integerxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location integerxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    String integer = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new PrimitiveTypeDenoter(integerxleft, integerxright, "INT");
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDenoter", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // TypeDenoter ::= BOOL
                {
                    TypeDenoter RESULT = null;
                    Location boolerxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location boolerxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    String booler = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new PrimitiveTypeDenoter(boolerxleft, boolerxright, "BOOL");
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDenoter", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // TypeDenoter ::= FLOAT
                {
                    TypeDenoter RESULT = null;
                    Location floaterxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location floaterxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    String floater = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new PrimitiveTypeDenoter(floaterxleft, floaterxright, "FLOAT");
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDenoter", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // TypeDenoter ::= STRING
                {
                    TypeDenoter RESULT = null;
                    Location stringerxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location stringerxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    String stringer = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new PrimitiveTypeDenoter(stringerxleft, stringerxright, "STRING");
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDenoter", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // TypeDenoter ::= BLPAR TypeDenoter BRPAR
                {
                    TypeDenoter RESULT = null;
                    Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    String b = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    TypeDenoter type = (TypeDenoter) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new ArrayTypeDenoter(bxleft, bxright, type);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDenoter", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // TypeDenoter ::= LPAR Types RPAR ARROW TypeDenoter
                {
                    TypeDenoter RESULT = null;
                    Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xleft;
                    Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xright;
                    String l = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    Location typesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location typesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    LinkedList<TypeDenoter> types = (LinkedList<TypeDenoter>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location rtypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location rtypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    TypeDenoter rtype = (TypeDenoter) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new FunctionTypeDenoter(lxleft, lxright, types, rtype);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDenoter", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // TypeDenoter ::= LPAR RPAR ARROW TypeDenoter
                {
                    TypeDenoter RESULT = null;
                    Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    String l = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    TypeDenoter type = (TypeDenoter) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new FunctionTypeDenoter(typexleft, typexright, type);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeDenoter", 7, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // Types ::= TypeDenoter COMMA Types
                {
                    LinkedList<TypeDenoter> RESULT = null;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    TypeDenoter type = (TypeDenoter) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location typesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location typesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    LinkedList<TypeDenoter> types = (LinkedList<TypeDenoter>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    types.addFirst(type);
                    RESULT = types;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // Types ::= TypeDenoter
                {
                    LinkedList<TypeDenoter> RESULT = null;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    TypeDenoter type = (TypeDenoter) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LinkedList<TypeDenoter>();
                    RESULT.addFirst(type);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types", 8, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // Statements ::= Stat SEMI Statements
                {
                    LinkedList<Statement> RESULT = null;
                    Location statxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location statxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Statement stat = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location statementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location statementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    LinkedList<Statement> statements = (LinkedList<Statement>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    statements.addFirst(stat);
                    RESULT = statements;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // Statements ::= Stat
                {
                    LinkedList<Statement> RESULT = null;
                    Location statxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location statxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Statement stat = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LinkedList<Statement>();
                    RESULT.addFirst(stat);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // Statements ::= Stat
                {
                    LinkedList<Statement> RESULT = null;
                    Location statxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location statxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Statement stat = (Statement) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LinkedList<Statement>();
                    RESULT.addFirst(stat);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements", 9, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // Stat ::= NOP
                {
                    Statement RESULT = null;
                    Location nopxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location nopxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    String nop = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new NopStatement(nopxleft, nopxright);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // Stat ::= WHILE Expr DO Statements END
                {
                    Statement RESULT = null;
                    Location wxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xleft;
                    Location wxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xright;
                    String w = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Expr expr = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location statementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location statementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    LinkedList<Statement> statements = (LinkedList<Statement>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new WhileStatement(wxleft, wxright, expr, statements);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // Stat ::= IF Expr THEN Statements ELSE Statements END
                {
                    Statement RESULT = null;
                    Location iferxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).xleft;
                    Location iferxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).xright;
                    String ifer = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)).value;
                    Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).xleft;
                    Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).xright;
                    Expr expr = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    Location statementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location statementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    LinkedList<Statement> statements = (LinkedList<Statement>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location elseStatementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location elseStatementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    LinkedList<Statement> elseStatements = (LinkedList<Statement>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new IfThenElseStatement(iferxleft, iferxright, expr, statements, elseStatements);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // Stat ::= IF Expr THEN Statements END
                {
                    Statement RESULT = null;
                    Location iferxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xleft;
                    Location iferxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xright;
                    String ifer = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Expr expr = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location statementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location statementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    LinkedList<Statement> statements = (LinkedList<Statement>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new IfThenStatement(iferxleft, iferxright, expr, statements);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // Stat ::= FOR ID ASSIGN Expr COMMA Expr DO Statements END
                {
                    Statement RESULT = null;
                    Location forerxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 8)).xleft;
                    Location forerxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 8)).xright;
                    String forer = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 8)).value;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).xright;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 7)).value;
                    Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).xleft;
                    Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).xright;
                    Expr expr = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    Location commaExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location commaExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Expr commaExpr = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location statementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location statementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    LinkedList<Statement> statements = (LinkedList<Statement>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new ForStatement(forerxleft, forerxright, new Variable(idxleft, idxright, id), expr, commaExpr, statements);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 8)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // Stat ::= LOCAL Var_decls SEMI Statements END
                {
                    Statement RESULT = null;
                    Location localxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xleft;
                    Location localxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).xright;
                    String local = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)).value;
                    Location varDeclsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location varDeclsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    LinkedList<VarDecl> varDecls = (LinkedList<VarDecl>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location statementsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location statementsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    LinkedList<Statement> statements = (LinkedList<Statement>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new LocalStatement(localxleft, localxright, varDecls, statements);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 4)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // Stat ::= ID ASSIGN Expr
                {
                    Statement RESULT = null;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Expr expr = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new AssignStatement(idxleft, idxright, new Id(idxleft, idxright, id), expr);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // Stat ::= Expr SLPAR Expr SRPAR ASSIGN Expr
                {
                    Statement RESULT = null;
                    Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).xleft;
                    Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).xright;
                    Expr expr = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    Location arrayExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location arrayExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Expr arrayExpr = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location assignExprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location assignExprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Expr assignExpr = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new ArrayElementStatement(exprxleft, exprxright, expr, arrayExpr, assignExpr);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // Stat ::= ID LPAR Exprs RPAR
                {
                    Statement RESULT = null;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location exprsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location exprsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    LinkedList<Expr> exprs = (LinkedList<Expr>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new FunctionCallStatement(idxleft, idxright, new Id(idxleft, idxright, id), exprs);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // Stat ::= ID LPAR RPAR
                {
                    Statement RESULT = null;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    RESULT = new FunctionCallStatement(idxleft, idxright, new Id(idxleft, idxright, id));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // Stat ::= Vars READ
                {
                    Statement RESULT = null;
                    Location varsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location varsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    LinkedList<Id> vars = (LinkedList<Id>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new ReadStatement(varsxleft, varsxright, vars);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // Stat ::= Exprs WRITE
                {
                    Statement RESULT = null;
                    Location exprsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location exprsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    LinkedList<Expr> exprs = (LinkedList<Expr>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new WriteStatement(exprsxleft, exprsxright, exprs);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // Stat ::= RETURN Expr
                {
                    Statement RESULT = null;
                    Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Expr expr = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new ReturnStatement(exprxleft, exprxright, expr);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // Stat ::= error
                {
                    Statement RESULT = null;
                    Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Object e = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat", 10, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // Vars ::= ID COMMA Vars
                {
                    LinkedList<Id> RESULT = null;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location varsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location varsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    LinkedList<Id> vars = (LinkedList<Id>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    vars.addFirst(new Id(idxleft, idxright, id));
                    RESULT = vars;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // Vars ::= ID
                {
                    LinkedList<Id> RESULT = null;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LinkedList<Id>();
                    RESULT.addFirst(new Id(idxleft, idxright, id));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars", 11, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // Exprs ::= Expr COMMA Exprs
                {
                    LinkedList<Expr> RESULT = null;
                    Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Expr expr = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location exprsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location exprsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    LinkedList<Expr> exprs = (LinkedList<Expr>) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    exprs.addFirst(expr);
                    RESULT = exprs;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // Exprs ::= Expr
                {
                    LinkedList<Expr> RESULT = null;
                    Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Expr expr = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LinkedList<Expr>();
                    RESULT.addFirst(expr);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs", 12, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // Expr ::= NIL
                {
                    Expr RESULT = null;
                    Location nilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location nilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    String nil = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new NilConst(nilxleft, nilxright);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // Expr ::= EXECUTE LPAR ID COMMA Exprs RPAR
                {
                    Expr RESULT = null;
                    Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).xleft;
                    Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).xright;
                    String ex = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    Location funcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location funcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    String func = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location exprsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location exprsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    LinkedList<Expr> exprs = (LinkedList<Expr>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new Execute(exxleft, exxright, new Id(funcxleft, funcxright, func), exprs);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // Expr ::= TRUE
                {
                    Expr RESULT = null;
                    Location truerxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location truerxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    boolean truer = (boolean) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new BooleanConst(truerxleft, truerxright, true);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // Expr ::= FALSE
                {
                    Expr RESULT = null;
                    Location falserxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location falserxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    boolean falser = (boolean) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new BooleanConst(falserxleft, falserxright, false);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // Expr ::= INT_CONST
                {
                    Expr RESULT = null;
                    Location intConstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location intConstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    int intConst = (int) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new IntegerConst(intConstxleft, intConstxright, intConst);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // Expr ::= FLOAT_CONST
                {
                    Expr RESULT = null;
                    Location floatConstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location floatConstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    float floatConst = (float) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new FloatConst(floatConstxleft, floatConstxright, floatConst);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // Expr ::= STRING_CONST
                {
                    Expr RESULT = null;
                    Location stringConstxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location stringConstxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    String stringConst = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new StringConst(stringConstxleft, stringConstxright, stringConst);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 52: // Expr ::= BLPAR BRPAR COLON TypeDenoter
                {
                    Expr RESULT = null;
                    Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    String b = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    TypeDenoter type = (TypeDenoter) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new ArrayConst(bxleft, bxright, type);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 53: // Expr ::= ID
                {
                    Expr RESULT = null;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new Id(idxleft, idxright, id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 54: // Expr ::= Expr SLPAR Expr SRPAR
                {
                    Expr RESULT = null;
                    Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    Expr expr = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location exprElemxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location exprElemxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    Expr exprElem = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new ArrayRead(exprxleft, exprxright, expr, exprElem);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 55: // Expr ::= ID LPAR Exprs RPAR
                {
                    Expr RESULT = null;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).xright;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    Location exprsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xleft;
                    Location exprsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).xright;
                    LinkedList<Expr> exprs = (LinkedList<Expr>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = new FunctionCall(idxleft, idxright, new Id(idxleft, idxright, id), exprs);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 56: // Expr ::= ID LPAR RPAR
                {
                    Expr RESULT = null;
                    Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    String id = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    RESULT = new FunctionCall(idxleft, idxright, new Id(idxleft, idxright, id));
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 57: // Expr ::= Expr PLUS Expr
                {
                    Expr RESULT = null;
                    Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Expr e1 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Expr e2 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new PlusOp(e1xleft, e1xright, e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 58: // Expr ::= Expr MINUS Expr
                {
                    Expr RESULT = null;
                    Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Expr e1 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Expr e2 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new MinusOp(e1xleft, e1xright, e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 59: // Expr ::= Expr TIMES Expr
                {
                    Expr RESULT = null;
                    Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Expr e1 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Expr e2 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new TimesOp(e1xleft, e1xright, e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 60: // Expr ::= Expr DIV Expr
                {
                    Expr RESULT = null;
                    Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Expr e1 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Expr e2 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new DivOp(e1xleft, e1xright, e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 61: // Expr ::= Expr AND Expr
                {
                    Expr RESULT = null;
                    Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Expr e1 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Expr e2 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new AndOp(e1xleft, e1xright, e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 62: // Expr ::= Expr OR Expr
                {
                    Expr RESULT = null;
                    Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Expr e1 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Expr e2 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new OrOp(e1xleft, e1xright, e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 63: // Expr ::= Expr GT Expr
                {
                    Expr RESULT = null;
                    Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Expr e1 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Expr e2 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new GtOp(e1xleft, e1xright, e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 64: // Expr ::= Expr GE Expr
                {
                    Expr RESULT = null;
                    Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Expr e1 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Expr e2 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new GeOp(e1xleft, e1xright, e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 65: // Expr ::= Expr LT Expr
                {
                    Expr RESULT = null;
                    Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Expr e1 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Expr e2 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LtOp(e1xleft, e1xright, e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 66: // Expr ::= Expr LE Expr
                {
                    Expr RESULT = null;
                    Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Expr e1 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Expr e2 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new LeOp(e1xleft, e1xright, e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 67: // Expr ::= Expr EQ Expr
                {
                    Expr RESULT = null;
                    Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Expr e1 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Expr e2 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new EqOp(e1xleft, e1xright, e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 68: // Expr ::= Expr NE Expr
                {
                    Expr RESULT = null;
                    Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xleft;
                    Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).xright;
                    Expr e1 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Expr e2 = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new NeOp(e1xleft, e1xright, e1, e2);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 69: // Expr ::= MINUS Expr
                {
                    Expr RESULT = null;
                    Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Expr expr = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new UMinusExpression(exprxleft, exprxright, expr);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 70: // Expr ::= NOT Expr
                {
                    Expr RESULT = null;
                    Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Expr expr = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new NotExpression(exprxleft, exprxright, expr);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 71: // Expr ::= SHARP Expr
                {
                    Expr RESULT = null;
                    Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xleft;
                    Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack.peek()).xright;
                    Expr expr = (Expr) ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = new SharpExpression(exprxleft, exprxright, expr);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 72: // Expr ::= error
                {
                    Expr RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr", 13, ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$Parser$act_num + "found in internal parse table");

            }
        } /* end of method */

        /** Method splitting the generated action code into several parts. */
        public final java_cup.runtime.Symbol CUP$Parser$do_action(
                int CUP$Parser$act_num,
                java_cup.runtime.lr_parser CUP$Parser$parser,
                java.util.Stack CUP$Parser$stack,
                int CUP$Parser$top)
                throws java.lang.Exception {
            return CUP$Parser$do_action_part00000000(
                    CUP$Parser$act_num,
                    CUP$Parser$parser,
                    CUP$Parser$stack,
                    CUP$Parser$top);
        }
    }

}
