/* The following code was generated by JFlex 1.7.0 */

/* JFlex example: part of Java language lexer specification */
package core;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import lexical.StringTable;

import java.io.InputStreamReader;

/**
 * This class is a simple example lexer.
 */


public class Lexer implements java_cup.runtime.Scanner {

  /**
   * This character denotes the end of file
   */
  public static final int YYEOF = -1;

  /**
   * initial size of the lookahead buffer
   */
  private static final int ZZ_BUFFERSIZE = 16384;

  /**
   * lexical states
   */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   * at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0, 0, 1, 1
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
          "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\63" +
                  "\1\64\1\45\1\6\2\0\1\65\1\50\1\51\1\5\1\14\1\56" +
                  "\1\61\1\12\1\4\1\10\11\11\1\60\1\57\1\42\1\43\1\44" +
                  "\2\0\1\22\1\21\2\6\1\13\1\6\1\16\4\6\1\17\2\6" +
                  "\1\20\13\6\1\54\1\15\1\55\1\0\1\6\1\0\1\41\1\46" +
                  "\1\26\1\33\1\32\1\23\1\47\1\34\1\30\2\6\1\35\1\6" +
                  "\1\25\1\31\1\62\1\6\1\40\1\36\1\27\1\24\1\6\1\37" +
                  "\3\6\1\52\1\0\1\53\1\0\41\7\2\0\4\6\4\0\1\6" +
                  "\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6" +
                  "\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6" +
                  "\21\0\160\7\5\6\1\0\2\6\2\0\4\6\10\0\1\6\1\0" +
                  "\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0\213\6\1\0" +
                  "\5\7\2\0\236\6\11\0\46\6\2\0\1\6\7\0\47\6\7\0" +
                  "\1\6\1\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0" +
                  "\1\7\10\0\33\6\5\0\3\6\15\0\5\7\6\0\1\6\4\0" +
                  "\13\7\5\0\53\6\37\7\4\0\2\6\1\7\143\6\1\0\1\6" +
                  "\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6" +
                  "\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0\131\6" +
                  "\13\7\1\6\16\0\12\7\41\6\11\7\2\6\4\0\1\6\5\0" +
                  "\26\6\4\7\1\6\11\7\1\6\3\7\1\6\5\7\22\0\31\6" +
                  "\3\7\104\0\1\6\1\0\13\6\67\0\33\7\1\0\4\7\66\6" +
                  "\3\7\1\6\22\7\1\6\7\7\12\6\2\7\2\0\12\7\1\0" +
                  "\7\6\1\0\7\6\1\0\3\7\1\0\10\6\2\0\2\6\2\0" +
                  "\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6" +
                  "\7\7\2\0\2\7\2\0\3\7\1\6\10\0\1\7\4\0\2\6" +
                  "\1\0\3\6\2\7\2\0\12\7\4\6\7\0\1\6\5\0\3\7" +
                  "\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6" +
                  "\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7" +
                  "\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0\14\7" +
                  "\3\6\1\7\13\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6" +
                  "\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7" +
                  "\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0" +
                  "\12\7\1\0\1\6\17\0\3\7\1\0\10\6\2\0\2\6\2\0" +
                  "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6" +
                  "\7\7\2\0\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0" +
                  "\3\6\2\7\2\0\12\7\1\0\1\6\20\0\1\7\1\6\1\0" +
                  "\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0" +
                  "\2\6\3\0\2\6\3\0\3\6\3\0\14\6\4\0\5\7\3\0" +
                  "\3\7\1\0\4\7\2\0\1\6\6\0\1\7\16\0\12\7\11\0" +
                  "\1\6\7\0\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0" +
                  "\12\6\1\0\5\6\3\0\1\6\7\7\1\0\3\7\1\0\4\7" +
                  "\7\0\2\7\1\0\2\6\6\0\2\6\2\7\2\0\12\7\22\0" +
                  "\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0" +
                  "\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0" +
                  "\2\7\7\0\1\6\1\0\2\6\2\7\2\0\12\7\1\0\2\6" +
                  "\17\0\2\7\1\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6" +
                  "\7\7\1\0\3\7\1\0\4\7\1\6\10\0\1\7\10\0\2\6" +
                  "\2\7\2\0\12\7\12\0\6\6\2\0\2\7\1\0\22\6\3\0" +
                  "\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0" +
                  "\6\7\1\0\1\7\1\0\10\7\22\0\2\7\15\0\60\6\1\7" +
                  "\2\6\7\7\4\0\10\6\10\7\1\0\12\7\47\0\2\6\1\0" +
                  "\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0" +
                  "\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0" +
                  "\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0\5\6\1\0" +
                  "\1\6\1\0\6\7\2\0\12\7\2\0\4\6\40\0\1\6\27\0" +
                  "\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0" +
                  "\2\7\10\6\1\0\44\6\4\0\24\7\1\0\2\7\5\6\13\7" +
                  "\1\0\44\7\11\0\1\7\71\0\53\6\24\7\1\6\12\7\6\0" +
                  "\6\6\4\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7" +
                  "\15\6\14\7\1\6\17\7\2\0\46\6\1\0\1\6\5\0\1\6" +
                  "\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6" +
                  "\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6\1\0\4\6" +
                  "\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6\1\0\71\6" +
                  "\1\0\4\6\2\0\103\6\2\0\3\7\40\0\20\6\20\0\125\6" +
                  "\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6\3\0\3\6" +
                  "\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6" +
                  "\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7" +
                  "\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7\2\0" +
                  "\12\7\6\0\130\6\10\0\51\6\1\7\1\6\5\0\106\6\12\0" +
                  "\35\6\3\0\14\7\4\0\14\7\12\0\12\7\36\6\2\0\5\6" +
                  "\13\0\54\6\4\0\21\7\7\6\2\7\6\0\12\7\46\0\27\6" +
                  "\5\7\4\0\65\6\12\7\1\0\35\7\2\0\13\7\6\0\12\7" +
                  "\15\0\1\6\130\0\5\7\57\6\21\7\7\6\4\0\12\7\21\0" +
                  "\11\7\14\0\3\7\36\6\15\7\2\6\12\7\54\6\16\7\14\0" +
                  "\44\6\24\7\10\0\12\7\3\0\3\6\12\7\44\6\122\0\3\7" +
                  "\1\0\25\7\4\6\1\7\4\6\3\7\2\6\11\0\300\6\47\7" +
                  "\25\0\4\7\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0" +
                  "\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0" +
                  "\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0" +
                  "\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\16\0" +
                  "\5\7\32\0\5\7\20\0\2\6\23\0\1\6\13\0\5\7\5\0" +
                  "\6\7\1\0\1\6\15\0\1\6\20\0\15\6\3\0\33\6\25\0" +
                  "\15\7\4\0\1\7\3\0\14\7\21\0\1\6\4\0\1\6\2\0" +
                  "\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0" +
                  "\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0" +
                  "\1\6\21\0\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0" +
                  "\4\6\3\7\2\6\14\0\46\6\1\0\1\6\5\0\1\6\2\0" +
                  "\70\6\7\0\1\6\17\0\1\7\27\6\11\0\7\6\1\0\7\6" +
                  "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6" +
                  "\1\0\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6" +
                  "\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0" +
                  "\3\6\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0" +
                  "\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0" +
                  "\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\1\7" +
                  "\4\0\12\7\1\0\31\6\7\0\1\7\120\6\2\7\45\0\11\6" +
                  "\2\0\147\6\2\0\4\6\1\0\4\6\14\0\13\6\115\0\12\6" +
                  "\1\7\3\6\1\7\4\6\1\7\27\6\5\7\20\0\1\6\7\0" +
                  "\64\6\14\0\2\7\62\6\21\7\13\0\12\7\6\0\22\7\6\6" +
                  "\3\0\1\6\4\0\12\7\34\6\10\7\2\0\27\6\15\7\14\0" +
                  "\35\6\3\0\4\7\57\6\16\7\16\0\1\6\12\7\46\0\51\6" +
                  "\16\7\11\0\3\6\1\7\10\6\2\7\2\0\12\7\6\0\27\6" +
                  "\3\0\1\6\1\7\4\0\60\6\1\7\1\6\3\7\2\6\2\7" +
                  "\5\6\2\7\1\6\1\7\1\6\30\0\3\6\2\0\13\6\5\7" +
                  "\2\0\3\6\2\7\12\0\6\6\2\0\6\6\2\0\6\6\11\0" +
                  "\7\6\1\0\7\6\221\0\43\6\10\7\1\0\2\7\2\0\12\7" +
                  "\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6" +
                  "\46\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6" +
                  "\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6" +
                  "\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7" +
                  "\20\0\7\7\14\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6" +
                  "\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6" +
                  "\4\0\1\6\1\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6" +
                  "\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7" +
                  "\4\0\14\6\1\0\32\6\1\0\23\6\1\0\2\6\1\0\17\6" +
                  "\2\0\16\6\42\0\173\6\105\0\65\6\210\0\1\7\202\0\35\6" +
                  "\3\0\61\6\57\0\37\6\21\0\33\6\65\0\36\6\2\0\44\6" +
                  "\4\0\10\6\1\0\5\6\52\0\236\6\2\0\12\7\u0356\0\6\6" +
                  "\2\0\1\6\1\0\54\6\1\0\2\6\3\0\1\6\2\0\27\6" +
                  "\252\0\26\6\12\0\32\6\106\0\70\6\6\0\2\6\100\0\1\6" +
                  "\3\7\1\0\2\7\5\0\4\7\4\6\1\0\3\6\1\0\33\6" +
                  "\4\0\3\7\4\0\1\7\40\0\35\6\203\0\66\6\12\0\26\6" +
                  "\12\0\23\6\215\0\111\6\u03b7\0\3\7\65\6\17\7\37\0\12\7" +
                  "\20\0\3\7\55\6\13\7\2\0\1\7\22\0\31\6\7\0\12\7" +
                  "\6\0\3\7\44\6\16\7\1\0\12\7\100\0\3\7\60\6\16\7" +
                  "\4\6\13\0\12\7\u04a6\0\53\6\15\7\10\0\12\7\u0936\0\u036f\6" +
                  "\221\0\143\6\u0b9d\0\u042f\6\u33d1\0\u0239\6\u04c7\0\105\6\13\0\1\6" +
                  "\56\7\20\0\4\7\15\6\u4060\0\2\6\u2163\0\5\7\3\0\26\7" +
                  "\2\0\7\7\36\0\4\7\224\0\3\7\u01bb\0\125\6\1\0\107\6" +
                  "\1\0\2\6\2\0\1\6\2\0\2\6\2\0\4\6\1\0\14\6" +
                  "\1\0\1\6\1\0\7\6\1\0\101\6\1\0\4\6\2\0\10\6" +
                  "\1\0\7\6\1\0\34\6\1\0\4\6\1\0\5\6\1\0\1\6" +
                  "\3\0\7\6\1\0\u0154\6\2\0\31\6\1\0\31\6\1\0\37\6" +
                  "\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6" +
                  "\1\0\37\6\1\0\31\6\1\0\10\6\2\0\62\7\u1600\0\4\6" +
                  "\1\0\33\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0\12\6" +
                  "\1\0\4\6\1\0\1\6\1\0\1\6\6\0\1\6\4\0\1\6" +
                  "\1\0\1\6\1\0\1\6\1\0\3\6\1\0\2\6\1\0\1\6" +
                  "\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6" +
                  "\1\0\2\6\1\0\1\6\2\0\4\6\1\0\7\6\1\0\4\6" +
                  "\1\0\4\6\1\0\1\6\1\0\12\6\1\0\21\6\5\0\3\6" +
                  "\1\0\5\6\1\0\21\6\u1144\0\ua6d7\6\51\0\u1035\6\13\0\336\6" +
                  "\u3fe2\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0" +
                  "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /**
   * Translates characters to character classes
   */
  private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\2\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7" +
                  "\15\5\1\10\1\11\1\12\1\13\1\5\1\14\1\15" +
                  "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
                  "\1\1\1\26\1\27\1\1\1\30\1\2\1\0\1\31" +
                  "\1\0\11\5\1\32\1\5\1\33\2\5\1\34\5\5" +
                  "\1\35\1\36\1\37\1\5\1\40\1\41\1\42\1\43" +
                  "\1\44\1\45\1\46\1\47\1\50\1\51\2\0\1\31" +
                  "\1\0\2\5\1\52\2\5\1\53\1\54\1\55\2\5" +
                  "\1\56\1\57\5\5\1\60\1\61\1\62\1\5\1\0" +
                  "\1\2\4\5\1\63\1\64\1\65\4\5\1\66\2\5" +
                  "\1\67\1\70\1\71\1\5\1\72\1\5\1\73\1\5" +
                  "\1\74\1\75\1\5\1\76";

  private static int[] zzUnpackAction() {
    int[] result = new int[135];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\66\0\154\0\242\0\154\0\330\0\154\0\u010e" +
                  "\0\u0144\0\u017a\0\154\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288" +
                  "\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438" +
                  "\0\u046e\0\u04a4\0\u04da\0\154\0\u0510\0\154\0\154\0\154" +
                  "\0\154\0\154\0\154\0\154\0\154\0\154\0\u0546\0\u057c" +
                  "\0\154\0\u05b2\0\u05e8\0\154\0\u061e\0\u0654\0\u068a\0\u06c0" +
                  "\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870" +
                  "\0\u08a6\0\u010e\0\u08dc\0\u010e\0\u0912\0\u0948\0\u010e\0\u097e" +
                  "\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\154\0\u0af8" +
                  "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154" +
                  "\0\154\0\154\0\u0b2e\0\u0b64\0\u0b9a\0\u0b9a\0\u0bd0\0\u0c06" +
                  "\0\u010e\0\u0c3c\0\u0c72\0\u010e\0\u010e\0\u010e\0\u0ca8\0\u0cde" +
                  "\0\u010e\0\u010e\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u010e" +
                  "\0\154\0\154\0\u0e22\0\u0e58\0\u0b2e\0\u0e8e\0\u0ec4\0\u0efa" +
                  "\0\u0f30\0\u010e\0\u010e\0\u010e\0\u0f66\0\u0f9c\0\u0fd2\0\u1008" +
                  "\0\u010e\0\u103e\0\u1074\0\u010e\0\u010e\0\u010e\0\u10aa\0\u010e" +
                  "\0\u10e0\0\u010e\0\u1116\0\u010e\0\u010e\0\u114c\0\u010e";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[135];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\11" +
                  "\1\12\1\3\1\10\1\13\1\3\1\14\4\10\1\15" +
                  "\1\10\1\16\1\10\1\17\1\20\1\21\1\22\1\23" +
                  "\1\10\1\24\1\25\1\26\1\27\1\30\1\31\1\32" +
                  "\1\33\1\34\1\35\1\14\1\36\1\37\1\40\1\41" +
                  "\1\42\1\43\1\44\1\45\1\46\1\47\1\10\1\50" +
                  "\1\51\1\3\1\52\2\3\12\52\1\53\46\52\1\54" +
                  "\1\52\70\0\1\5\67\0\1\55\1\56\66\0\4\10" +
                  "\1\0\1\10\2\0\24\10\4\0\2\10\12\0\1\10" +
                  "\15\0\1\57\1\60\16\0\1\60\43\0\2\12\1\57" +
                  "\1\60\16\0\1\60\41\0\4\10\1\0\1\10\2\0" +
                  "\1\10\1\61\15\10\1\61\4\10\4\0\2\10\12\0" +
                  "\1\10\11\0\4\10\1\0\1\10\2\0\6\10\1\62" +
                  "\4\10\1\63\3\10\1\64\3\10\1\65\4\0\2\10" +
                  "\12\0\1\10\11\0\4\10\1\0\1\10\2\0\12\10" +
                  "\1\66\1\67\10\10\4\0\2\10\12\0\1\10\11\0" +
                  "\4\10\1\0\1\10\2\0\16\10\1\70\3\10\1\71" +
                  "\1\10\4\0\2\10\12\0\1\10\11\0\4\10\1\0" +
                  "\1\10\2\0\5\10\1\72\1\10\1\73\14\10\4\0" +
                  "\2\10\12\0\1\10\11\0\4\10\1\0\1\10\2\0" +
                  "\22\10\1\74\1\10\4\0\2\10\12\0\1\10\11\0" +
                  "\4\10\1\0\1\10\2\0\7\10\1\75\7\10\1\76" +
                  "\4\10\4\0\2\10\12\0\1\10\11\0\4\10\1\0" +
                  "\1\10\2\0\13\10\1\77\10\10\4\0\2\10\12\0" +
                  "\1\10\11\0\4\10\1\0\1\10\2\0\13\10\1\100" +
                  "\10\10\4\0\2\10\12\0\1\10\11\0\4\10\1\0" +
                  "\1\10\2\0\11\10\1\101\12\10\4\0\2\10\12\0" +
                  "\1\10\11\0\4\10\1\0\1\10\2\0\16\10\1\102" +
                  "\5\10\4\0\2\10\12\0\1\10\11\0\4\10\1\0" +
                  "\1\10\2\0\14\10\1\103\7\10\4\0\2\10\12\0" +
                  "\1\10\11\0\4\10\1\0\1\10\2\0\7\10\1\104" +
                  "\14\10\4\0\2\10\12\0\1\10\46\0\1\105\65\0" +
                  "\1\106\65\0\1\107\30\0\4\10\1\0\1\10\2\0" +
                  "\13\10\1\110\10\10\4\0\2\10\12\0\1\10\47\0" +
                  "\1\111\64\0\1\112\22\0\1\52\2\0\12\52\1\0" +
                  "\46\52\1\0\1\52\15\0\1\113\5\0\1\114\1\0" +
                  "\1\115\1\0\1\116\10\0\1\117\5\0\1\120\15\0" +
                  "\1\121\1\122\1\55\1\4\1\5\63\55\5\123\1\124" +
                  "\60\123\10\0\2\57\1\0\1\60\16\0\1\60\43\0" +
                  "\2\125\2\0\1\126\44\0\1\126\12\0\4\10\1\0" +
                  "\1\10\2\0\2\10\1\127\10\10\1\127\10\10\4\0" +
                  "\2\10\12\0\1\10\11\0\4\10\1\0\1\10\2\0" +
                  "\7\10\1\130\14\10\4\0\2\10\12\0\1\10\11\0" +
                  "\4\10\1\0\1\10\2\0\22\10\1\131\1\10\4\0" +
                  "\2\10\12\0\1\10\11\0\4\10\1\0\1\10\2\0" +
                  "\13\10\1\132\10\10\4\0\2\10\12\0\1\10\11\0" +
                  "\4\10\1\0\1\10\2\0\17\10\1\133\4\10\4\0" +
                  "\2\10\12\0\1\10\11\0\4\10\1\0\1\10\2\0" +
                  "\17\10\1\134\4\10\4\0\2\10\12\0\1\10\11\0" +
                  "\4\10\1\0\1\10\2\0\11\10\1\135\12\10\4\0" +
                  "\2\10\12\0\1\136\11\0\4\10\1\0\1\10\2\0" +
                  "\14\10\1\137\7\10\4\0\2\10\12\0\1\10\11\0" +
                  "\4\10\1\0\1\10\2\0\6\10\1\140\15\10\4\0" +
                  "\2\10\12\0\1\10\11\0\4\10\1\0\1\10\2\0" +
                  "\11\10\1\141\12\10\4\0\2\10\12\0\1\10\11\0" +
                  "\4\10\1\0\1\10\2\0\15\10\1\142\6\10\4\0" +
                  "\2\10\12\0\1\10\11\0\4\10\1\0\1\10\2\0" +
                  "\20\10\1\143\3\10\4\0\2\10\12\0\1\10\11\0" +
                  "\4\10\1\0\1\10\2\0\10\10\1\144\13\10\4\0" +
                  "\2\10\12\0\1\10\11\0\4\10\1\0\1\10\2\0" +
                  "\22\10\1\145\1\10\4\0\2\10\12\0\1\10\11\0" +
                  "\4\10\1\0\1\10\2\0\12\10\1\146\11\10\4\0" +
                  "\2\10\12\0\1\10\11\0\4\10\1\0\1\10\2\0" +
                  "\11\10\1\147\12\10\4\0\2\10\12\0\1\10\11\0" +
                  "\4\10\1\0\1\10\2\0\15\10\1\150\6\10\4\0" +
                  "\2\10\12\0\1\10\46\0\1\151\66\0\1\152\27\0" +
                  "\4\10\1\0\1\10\2\0\13\10\1\153\10\10\4\0" +
                  "\2\10\12\0\1\10\3\0\5\123\1\154\64\123\1\155" +
                  "\1\154\60\123\10\0\2\125\62\0\4\10\1\0\1\10" +
                  "\2\0\3\10\1\156\20\10\4\0\1\156\1\10\12\0" +
                  "\1\10\11\0\4\10\1\0\1\10\2\0\10\10\1\157" +
                  "\13\10\4\0\2\10\12\0\1\10\11\0\4\10\1\0" +
                  "\1\10\2\0\23\10\1\160\4\0\2\10\12\0\1\10" +
                  "\11\0\4\10\1\0\1\10\2\0\20\10\1\161\3\10" +
                  "\4\0\2\10\12\0\1\10\11\0\4\10\1\0\1\10" +
                  "\2\0\7\10\1\162\14\10\4\0\2\10\12\0\1\10" +
                  "\11\0\4\10\1\0\1\10\2\0\14\10\1\163\7\10" +
                  "\4\0\2\10\12\0\1\10\11\0\4\10\1\0\1\10" +
                  "\2\0\14\10\1\164\7\10\4\0\2\10\12\0\1\10" +
                  "\11\0\4\10\1\0\1\10\2\0\23\10\1\165\4\0" +
                  "\2\10\12\0\1\10\11\0\4\10\1\0\1\10\2\0" +
                  "\12\10\1\166\11\10\4\0\2\10\12\0\1\10\11\0" +
                  "\4\10\1\0\1\10\2\0\17\10\1\167\4\10\4\0" +
                  "\2\10\12\0\1\10\11\0\4\10\1\0\1\10\2\0" +
                  "\6\10\1\170\15\10\4\0\2\10\12\0\1\10\11\0" +
                  "\4\10\1\0\1\10\2\0\17\10\1\171\4\10\4\0" +
                  "\2\10\12\0\1\10\3\0\4\123\1\5\1\154\60\123" +
                  "\6\0\4\10\1\0\1\10\2\0\4\10\1\172\16\10" +
                  "\1\172\4\0\2\10\12\0\1\10\11\0\4\10\1\0" +
                  "\1\10\2\0\11\10\1\173\12\10\4\0\2\10\12\0" +
                  "\1\10\11\0\4\10\1\0\1\10\2\0\11\10\1\174" +
                  "\12\10\4\0\2\10\12\0\1\10\11\0\4\10\1\0" +
                  "\1\10\2\0\14\10\1\175\7\10\4\0\2\10\12\0" +
                  "\1\10\11\0\4\10\1\0\1\10\2\0\17\10\1\176" +
                  "\4\10\4\0\2\10\12\0\1\10\11\0\4\10\1\0" +
                  "\1\10\2\0\7\10\1\177\14\10\4\0\2\10\12\0" +
                  "\1\10\11\0\4\10\1\0\1\10\2\0\14\10\1\200" +
                  "\7\10\4\0\2\10\12\0\1\10\11\0\4\10\1\0" +
                  "\1\10\2\0\22\10\1\201\1\10\4\0\2\10\12\0" +
                  "\1\10\11\0\4\10\1\0\1\10\2\0\1\10\1\202" +
                  "\15\10\1\202\4\10\4\0\2\10\12\0\1\10\11\0" +
                  "\4\10\1\0\1\10\2\0\12\10\1\203\11\10\4\0" +
                  "\2\10\12\0\1\10\11\0\4\10\1\0\1\10\2\0" +
                  "\24\10\4\0\1\10\1\204\12\0\1\10\11\0\4\10" +
                  "\1\0\1\10\2\0\7\10\1\205\14\10\4\0\2\10" +
                  "\12\0\1\10\11\0\4\10\1\0\1\10\2\0\13\10" +
                  "\1\206\10\10\4\0\2\10\12\0\1\10\11\0\4\10" +
                  "\1\0\1\10\2\0\7\10\1\207\14\10\4\0\2\10" +
                  "\12\0\1\10\3\0";

  private static int[] zzUnpackTrans() {
    int[] result = new int[4482];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\2\0\1\11\1\1\1\11\1\1\1\11\3\1\1\11" +
                  "\20\1\1\11\1\1\11\11\2\1\1\11\2\1\1\11" +
                  "\1\1\1\0\1\1\1\0\26\1\1\11\1\1\12\11" +
                  "\2\0\1\1\1\0\22\1\2\11\1\1\1\0\33\1";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[135];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * the input device
   */
  private java.io.Reader zzReader;

  /**
   * the current state of the DFA
   */
  private int zzState;

  /**
   * the current lexical state
   */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is
   * the source of the yytext() string
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /**
   * the textposition at the last accepting state
   */
  private int zzMarkedPos;

  /**
   * the current text position in the buffer
   */
  private int zzCurrentPos;

  /**
   * startRead marks the beginning of the yytext() string in the buffer
   */
  private int zzStartRead;

  /**
   * endRead marks the last character in the buffer, that has been read
   * from input
   */
  private int zzEndRead;

  /**
   * number of newlines encountered up to the start of the matched text
   */
  private int yyline;

  /**
   * the number of characters up to the start of the matched text
   */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /**
   * zzAtEOF == true iff the scanner is at the EOF
   */
  private boolean zzAtEOF;

  /**
   * denotes if the user-EOF-code has already been executed
   */
  private boolean zzEOFDone;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private StringBuilder string = new StringBuilder();
  private ComplexSymbolFactory symbolFactory;
  private StringTable table;

  public Lexer(ComplexSymbolFactory sf, java.io.InputStream is, StringTable table) {
    this(new InputStreamReader(is));
    this.symbolFactory = sf;
    this.table = table;
  }

  public Symbol generateTokenSym(String name, int type) {
    return symbolFactory.newSymbol(name, type, new Location(yyline + 1, yycolumn + 1 - yylength()),
            new Location(yyline + 1, yycolumn + 1));
  }

  public Symbol generateTokenSym(String name, int type, Object value) {
    return symbolFactory.newSymbol(name, type, new Location(yyline + 1, yycolumn + 1),
            new Location(yyline + 1, yycolumn + yylength()), value);
  }

  public boolean initialize(String filePath) {
    try {
      this.zzReader = new java.io.FileReader(filePath);
      return true;
    } catch (java.io.FileNotFoundException e) {
      return false;
    }
  }


  /**
   * Creates a new scanner
   *
   * @param in the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    char[] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2864) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return <code>false</code>, iff there was new input.
   * @throws java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
              zzBuffer, 0,
              zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   * <p>
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   * <p>
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL = true;
    zzAtEOF = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   * <p>
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead + pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   * <p>
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   * <p>
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   * <p>
   * They will be read again by then next call of the scanning method
   *
   * @param number the number of characters to be read again.
   *               This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength())
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   * @throws java.io.IOException if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzCMapL = ZZ_CMAP;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead;
           zzCurrentPosL < zzMarkedPosL;
           zzCurrentPosL += zzCharCount) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
          case '\u000B':  // fall through
          case '\u000C':  // fall through
          case '\u0085':  // fall through
          case '\u2028':  // fall through
          case '\u2029':
            yyline++;
            yycolumn = 0;
            zzR = false;
            break;
          case '\r':
            yyline++;
            yycolumn = 0;
            zzR = true;
            break;
          case '\n':
            if (zzR)
              zzR = false;
            else {
              yyline++;
              yycolumn = 0;
            }
            break;
          default:
            zzR = false;
            yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1) {
        zzAction = zzState;
      }


      zzForAction:
      {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        {
          return generateTokenSym("EOF", ParserSym.EOF);
        }
      } else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: {
            throw new RuntimeException("Error:(" + yyline + ":" + yycolumn + ") Cannot resolve symbol '" + yytext() + "'");
          }
          // fall through
          case 63:
            break;
          case 2: { /* ignore */
          }
          // fall through
          case 64:
            break;
          case 3: {
            return generateTokenSym("DIV", ParserSym.DIV);
          }
          // fall through
          case 65:
            break;
          case 4: {
            return generateTokenSym("TIMES", ParserSym.TIMES);
          }
          // fall through
          case 66:
            break;
          case 5: {
            return generateTokenSym("ID", ParserSym.ID, yytext());
          }
          // fall through
          case 67:
            break;
          case 6: {
            return generateTokenSym("INT_CONST", ParserSym.INT_CONST, Integer.parseInt(yytext()));
          }
          // fall through
          case 68:
            break;
          case 7: {
            return generateTokenSym("PLUS", ParserSym.PLUS);
          }
          // fall through
          case 69:
            break;
          case 8: {
            return generateTokenSym("LT", ParserSym.LT);
          }
          // fall through
          case 70:
            break;
          case 9: {
            return generateTokenSym("ASSIGN", ParserSym.ASSIGN);
          }
          // fall through
          case 71:
            break;
          case 10: {
            return generateTokenSym("GT", ParserSym.GT);
          }
          // fall through
          case 72:
            break;
          case 11: {
            return generateTokenSym("SHARP", ParserSym.SHARP);
          }
          // fall through
          case 73:
            break;
          case 12: {
            return generateTokenSym("LPAR", ParserSym.LPAR);
          }
          // fall through
          case 74:
            break;
          case 13: {
            return generateTokenSym("RPAR", ParserSym.RPAR);
          }
          // fall through
          case 75:
            break;
          case 14: {
            return generateTokenSym("BLPAR", ParserSym.BLPAR);
          }
          // fall through
          case 76:
            break;
          case 15: {
            return generateTokenSym("BRPAR", ParserSym.BRPAR);
          }
          // fall through
          case 77:
            break;
          case 16: {
            return generateTokenSym("SLPAR", ParserSym.SLPAR);
          }
          // fall through
          case 78:
            break;
          case 17: {
            return generateTokenSym("SRPAR", ParserSym.SRPAR);
          }
          // fall through
          case 79:
            break;
          case 18: {
            return generateTokenSym("COMMA", ParserSym.COMMA);
          }
          // fall through
          case 80:
            break;
          case 19: {
            return generateTokenSym("SEMI", ParserSym.SEMI);
          }
          // fall through
          case 81:
            break;
          case 20: {
            return generateTokenSym("COLON", ParserSym.COLON);
          }
          // fall through
          case 82:
            break;
          case 21: {
            return generateTokenSym("MINUS", ParserSym.MINUS);
          }
          // fall through
          case 83:
            break;
          case 22: {
            string.setLength(0);
            yybegin(STRING);
          }
          // fall through
          case 84:
            break;
          case 23: {
            string.append(yytext());
          }
          // fall through
          case 85:
            break;
          case 24: {
            yybegin(YYINITIAL);
            return generateTokenSym("STRING_CONST", ParserSym.STRING_CONST);
          }
          // fall through
          case 86:
            break;
          case 25: {
            return generateTokenSym("FLOAT_CONST", ParserSym.FLOAT_CONST, Float.parseFloat(yytext()));
          }
          // fall through
          case 87:
            break;
          case 26: {
            return generateTokenSym("IF", ParserSym.IF);
          }
          // fall through
          case 88:
            break;
          case 27: {
            return generateTokenSym("OR", ParserSym.OR);
          }
          // fall through
          case 89:
            break;
          case 28: {
            return generateTokenSym("DO", ParserSym.DO);
          }
          // fall through
          case 90:
            break;
          case 29: {
            return generateTokenSym("LE", ParserSym.LE);
          }
          // fall through
          case 91:
            break;
          case 30: {
            return generateTokenSym("EQ", ParserSym.EQ);
          }
          // fall through
          case 92:
            break;
          case 31: {
            return generateTokenSym("GE", ParserSym.GE);
          }
          // fall through
          case 93:
            break;
          case 32: {
            return generateTokenSym("ARROW", ParserSym.ARROW);
          }
          // fall through
          case 94:
            break;
          case 33: {
            return generateTokenSym("NE", ParserSym.NE);
          }
          // fall through
          case 95:
            break;
          case 34: {
            string.append('\\');
          }
          // fall through
          case 96:
            break;
          case 35: {
            string.append('\f');
          }
          // fall through
          case 97:
            break;
          case 36: {
            string.append('\n');
          }
          // fall through
          case 98:
            break;
          case 37: {
            string.append('\t');
          }
          // fall through
          case 99:
            break;
          case 38: {
            string.append('\r');
          }
          // fall through
          case 100:
            break;
          case 39: {
            string.append('\b');
          }
          // fall through
          case 101:
            break;
          case 40: {
            string.append('\"');
          }
          // fall through
          case 102:
            break;
          case 41: {
            string.append('\'');
          }
          // fall through
          case 103:
            break;
          case 42: {
            return generateTokenSym("FOR", ParserSym.FOR);
          }
          // fall through
          case 104:
            break;
          case 43: {
            return generateTokenSym("NIL", ParserSym.NIL);
          }
          // fall through
          case 105:
            break;
          case 44: {
            return generateTokenSym("NOT", ParserSym.NOT);
          }
          // fall through
          case 106:
            break;
          case 45: {
            return generateTokenSym("NOP", ParserSym.NOP);
          }
          // fall through
          case 107:
            break;
          case 46: {
            return generateTokenSym("INT", ParserSym.INT);
          }
          // fall through
          case 108:
            break;
          case 47: {
            return generateTokenSym("END", ParserSym.END);
          }
          // fall through
          case 109:
            break;
          case 48: {
            return generateTokenSym("AND", ParserSym.AND);
          }
          // fall through
          case 110:
            break;
          case 49: {
            return generateTokenSym("READ", ParserSym.READ);
          }
          // fall through
          case 111:
            break;
          case 50: {
            return generateTokenSym("WRITE", ParserSym.WRITE);
          }
          // fall through
          case 112:
            break;
          case 51: {
            return generateTokenSym("THEN", ParserSym.THEN);
          }
          // fall through
          case 113:
            break;
          case 52: {
            return generateTokenSym("TRUE", ParserSym.TRUE);
          }
          // fall through
          case 114:
            break;
          case 53: {
            return generateTokenSym("ELSE", ParserSym.ELSE);
          }
          // fall through
          case 115:
            break;
          case 54: {
            return generateTokenSym("BOOL", ParserSym.BOOL);
          }
          // fall through
          case 116:
            break;
          case 55: {
            return generateTokenSym("FLOAT", ParserSym.FLOAT);
          }
          // fall through
          case 117:
            break;
          case 56: {
            return generateTokenSym("FALSE", ParserSym.FALSE);
          }
          // fall through
          case 118:
            break;
          case 57: {
            return generateTokenSym("LOCAL", ParserSym.LOCAL);
          }
          // fall through
          case 119:
            break;
          case 58: {
            return generateTokenSym("WHILE", ParserSym.WHILE);
          }
          // fall through
          case 120:
            break;
          case 59: {
            return generateTokenSym("GLOBAL", ParserSym.GLOBAL);
          }
          // fall through
          case 121:
            break;
          case 60: {
            return generateTokenSym("STRING", ParserSym.STRING);
          }
          // fall through
          case 122:
            break;
          case 61: {
            return generateTokenSym("RETURN", ParserSym.RETURN);
          }
          // fall through
          case 123:
            break;
          case 62: {
            return generateTokenSym("FUNCTION", ParserSym.FUNCTION);
          }
          // fall through
          case 124:
            break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
