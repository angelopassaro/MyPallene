/* Simple +/-/* syntax.expression language; Parser evaluates constant expressions on the fly*/
package core;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java.util.LinkedList;
import java.util.List;

import syntax.*;
import syntax.expression.*;
import syntax.expression.binaryexpr.arithop.DivOp;
import syntax.expression.binaryexpr.arithop.MinusOp;
import syntax.expression.binaryexpr.arithop.PlusOp;
import syntax.expression.binaryexpr.arithop.TimesOp;
import syntax.expression.binaryexpr.relop.*;
import syntax.expression.unaryexpr.*;
import syntax.function.*;
import syntax.statement.*;
import syntax.typedenoter.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

class Parser;

parser code{:

   public void report_error(String message, Object info) {
     if (info instanceof ComplexSymbol) {
       ComplexSymbol cs = (ComplexSymbol)info;
       String msg = String.format("%s for input symbol %s spanning from $s to %s", message, cs.getName(), cs.getLeft(), cs.getRight());
       System.err.println(msg);
     } else {
         System.err.println(message);
     }
   }

   protected void syntax_error() {
     List<Integer> ids = this.expected_token_ids();
     LinkedList<String> list = new LinkedList<>();
     ids.forEach(id -> list.add(this.symbl_name_from_id(id)));
     System.err.println("instead expected token classes are " + list);
    }

:}


/* Terminals (tokens returned by the scanner). */
terminal String FUNCTION, MAIN, END, IF, THEN, ELSE, WHILE, DO, FOR, LOCAL, GLOBAL,READ, WRITE, RETURN, NOT, SHARP, ID; /* Keywords */
terminal String NIL, INT, BOOL, FLOAT, STRING;                                                                          /* Types Keywords */
terminal String LPAR, RPAR, BLPAR, BRPAR, SLPAR, SRPAR, COMMA, SEMI, COLON;                                             /* separators */
terminal String AND, OR, LT, LE, EQ, NE, GT, GE, ARROW, ASSIGN, NOP;                                                    /* relop */
terminal String PLUS, MINUS, TIMES, DIV;                                                                                /* arop */
terminal String UMINUS;

/* Types Keywords */
terminal int                INT_CONST;
terminal float              FLOAT_CONST;
terminal String             STRING_CONST;
terminal boolean            TRUE, FALSE;

/* Non terminals */
non terminal                Program Program;
non terminal                Global Global;
non terminal                LinkedList<Function> Functions;
non terminal                Function Def_fun;
non terminal                LinkedList<ParDecl> Par_decls;
non terminal                LinkedList<VarDecl> Var_decls;
non terminal                VarInitValue Var_init_value;
non terminal                TypeDenoter TypeDenoter;
non terminal                LinkedList<TypeDenoter> Types;
non terminal                LinkedList<Statement> Statements;
non terminal                Statement Stat;
non terminal                LinkedList<Id> Vars;
non terminal                LinkedList<Expr> Exprs;
non terminal                Expr Expr;


/* Precedences */
precedence left PLUS, MINUS, OR;
precedence left TIMES, DIV, AND;
precedence nonassoc LT, LE, EQ, NE, GT, GE;
precedence left UMINUS, NOT, COMMA, SHARP;

/* The grammar rules */

Program             ::= Global:global Functions:functions                                                               {: RESULT = new Program(functionsxleft, functionsxright, global, functions); :}
                        ;

Global              ::= GLOBAL:g Var_decls:varDecls END                                                                 {: RESULT = new Global(gxleft,gxright,varDecls); :}
                        | /* empty*/
                        ;

Functions           ::= Def_fun:defFun Functions:functions                                                              {: functions.addFirst(defFun); RESULT = functions; :}
                        | Def_fun:defFun                                                                                {: RESULT = new LinkedList<Function>(); RESULT.addFirst(defFun); :}
                        ;

Def_fun             ::= FUNCTION:f ID:id LPAR Par_decls:parDecl RPAR COLON TypeDenoter:type Statements:statements END   {: RESULT = new ComplexDefFun(fxleft, fxright, new Variable(idxleft, idxright, id), type, statements, parDecl); :}
                        ;

Def_fun             ::= FUNCTION:f ID:id LPAR RPAR COLON TypeDenoter:type Statements:statements END                     {: RESULT = new SimpleDefFun(fxleft, fxright,new Variable(idxleft, idxright, id), type, statements);:}
                        ;

Par_decls            ::= ID:id COLON TypeDenoter:type COMMA Par_decls:parDecl                                           {: parDecl.addFirst(new ParDecl(idxleft, idxright, new Variable(idxleft, idxright, id), type));RESULT = parDecl;:}
                        | ID:id COLON TypeDenoter:type                                                                  {: RESULT = new LinkedList<ParDecl>(); RESULT.addFirst(new ParDecl(idxleft, idxright, new Variable(idxleft, idxright, id), type));:}
                        ;

Var_decls           ::= Var_decls:varDecls SEMI ID:id COLON TypeDenoter:type Var_init_value:varInit                     {: varDecls.addFirst(new VarDecl(idxleft,idxright,new Variable(idxleft, idxright, id),type,varInit)); RESULT = varDecls;:}
                        | ID:id COLON TypeDenoter:type Var_init_value:varInit                                           {: RESULT = new LinkedList<VarDecl>(); RESULT.addFirst(new VarDecl(idxleft,idxright,new Variable(idxleft, idxright, id), type, varInit)); :}
                        ;

Var_init_value      ::= ASSIGN Expr:expr                                                                                {:  RESULT = new VarInitValue(exprxleft, exprxright, expr); :}
                        | /*empty*/
                        ;

TypeDenoter         ::= NIL:nil                                                                                         {: RESULT = new PrimitiveTypeDenoter(nilxleft, nilxright, "NIL"); :}
                        | INT:integer                                                                                   {: RESULT = new PrimitiveTypeDenoter(integerxleft, integerxright, "INT");:}
                        | BOOL:booler                                                                                   {: RESULT = new PrimitiveTypeDenoter(boolerxleft, boolerxright, "BOOL"); :}
                        | FLOAT:floater                                                                                 {: RESULT = new PrimitiveTypeDenoter(floaterxleft, floaterxright, "FLOAT");:}
                        | STRING:stringer                                                                               {: RESULT = new PrimitiveTypeDenoter(stringerxleft, stringerxright, "STRING");:}
                        | BLPAR:b TypeDenoter:type BRPAR                                                                {: RESULT = new ArrayTypeDenoter(bxleft, bxright, type);:}
                        | LPAR:l Types:types RPAR ARROW TypeDenoter:rtype                                               {: RESULT = new FunctionTypeDenoter(lxleft, lxright, types, rtype);:}
                        | LPAR:l RPAR ARROW TypeDenoter:type                                                            {: RESULT = new FunctionTypeDenoter(typexleft, typexright, type); :}
                        ;

Types               ::= TypeDenoter:type COMMA Types:types                                                              {: types.addFirst(type); RESULT = types;:}
                        | TypeDenoter:type                                                                              {: RESULT = new LinkedList<TypeDenoter>(); RESULT.addFirst(type);:}
                        ;

Statements           ::= Stat:stat SEMI Statements:statements                                                           {: statements.addFirst(stat); RESULT = statements; :}
                        | Stat:stat                                                                                     {: RESULT = new LinkedList<Statement>(); RESULT.addFirst(stat); :}
                        ;

Stat                ::= NOP:nop                                                                                         {: RESULT = new NopStatement(nopxleft, nopxright); :}
                        | WHILE:w Expr:expr DO Statements:statements END                                                {: RESULT = new WhileStatement(wxleft, wxright, expr, statements);:}
                        | IF:ifer Expr:expr THEN Statements:statements ELSE Statements:elseStatements END               {: RESULT = new IfThenElseStatement(iferxleft, iferxright,expr,statements, elseStatements);:}
                        | IF:ifer Expr:expr THEN Statements:statements END                                              {: RESULT = new IfThenStatement(iferxleft, iferxright, expr, statements); :}
                        | FOR:forer ID:id ASSIGN Expr:expr COMMA Expr:commaExpr DO Statements:statements END            {: RESULT = new ForStatement(forerxleft, forerxright, new Variable(idxleft, idxright, id), expr, commaExpr, statements);:}
                        | LOCAL:local Var_decls:varDecls SEMI Statements:statements END                                 {: RESULT = new LocalStatement(localxleft, localxright, varDecls, statements);:}
                        | ID:id ASSIGN Expr:expr                                                                        {: RESULT = new AssignStatement(idxleft, idxright, new Id(idxleft, idxright, id), expr);:}
                        | Expr:expr SLPAR Expr:arrayExpr SRPAR ASSIGN Expr:assignExpr                                   {: RESULT = new ArrayElementStatement(exprxleft, exprxright, expr, arrayExpr, assignExpr);:}
                        | ID:id LPAR Exprs:exprs RPAR                                                                   {: RESULT = new FunctionCallStatement(idxleft, idxright, new Id(idxleft, idxright, id) ,exprs);:}
                        | ID:id LPAR RPAR                                                                               {: RESULT = new FunctionCallStatement(idxleft, idxright, new Id(idxleft, idxright, id)); :}
                        | Vars:vars READ                                                                                {: RESULT = new ReadStatement(varsxleft, varsxright, vars); :}
                        | Exprs:exprs WRITE                                                                             {: RESULT = new WriteStatement(exprsxleft, exprsxright, exprs); :}
                        | RETURN Expr:expr                                                                              {: RESULT = new ReturnStatement(exprxleft, exprxright, expr); :}
                        | error:e                                                                                       {: :}
                        ;

Vars                ::= ID:id COMMA Vars:vars                                                                           {: vars.addFirst(new Id(idxleft, idxright, id));RESULT = vars; :}
                        | ID:id                                                                                         {: RESULT = new LinkedList<Id>(); RESULT.addFirst(new Id(idxleft, idxright, id));:}
                        ;
Exprs               ::= Expr:expr COMMA Exprs:exprs                                                                     {: exprs.addFirst(expr); RESULT = exprs;:}
                        | Expr:expr                                                                                     {: RESULT = new LinkedList<Expr>(); RESULT.addFirst(expr);:}
                        ;

Expr                ::= NIL:nil                                                                                         {: RESULT = new NilConst(nilxleft, nilxright); :}
                        | TRUE:truer                                                                                    {: RESULT = new BooleanConst(truerxleft, truerxright, true);:}
                        | FALSE:falser                                                                                  {: RESULT = new BooleanConst(falserxleft, falserxright, false);:}
                        | INT_CONST:intConst                                                                            {: RESULT = new IntegerConst(intConstxleft, intConstxright, intConst);:}
                        | FLOAT_CONST:floatConst                                                                        {: RESULT = new FloatConst(floatConstxleft, floatConstxright, floatConst);:}
                        | STRING_CONST:stringConst                                                                      {: RESULT = new StringConst(stringConstxleft, stringConstxright, stringConst);:}
                        | BLPAR:b BRPAR COLON TypeDenoter:type                                                          {: RESULT = new ArrayConst(bxleft, bxright, type);:}
                        | ID:id                                                                                         {: RESULT = new Id(idxleft, idxright, id);:}
                        | Expr:expr SLPAR Expr:exprElem SRPAR                                                           {: RESULT = new ArrayRead(exprxleft, exprxright, expr, exprElem);:}
                        | ID:id LPAR Exprs:exprs RPAR                                                                   {: RESULT = new FunctionCall(idxleft, idxright, new Id(idxleft, idxright, id), exprs);:}
                        | ID:id LPAR RPAR                                                                               {: RESULT = new FunctionCall(idxleft, idxright, new Id(idxleft, idxright, id)); :}
                        | Expr:e1 PLUS Expr:e2                                                                          {: RESULT = new PlusOp(e1xleft, e1xright, e1, e2);:}
                        | Expr:e1 MINUS Expr:e2                                                                         {: RESULT = new MinusOp(e1xleft, e1xright, e1, e2);:}
                        | Expr:e1 TIMES Expr:e2                                                                         {: RESULT = new TimesOp(e1xleft, e1xright, e1, e2);:}
                        | Expr:e1 DIV Expr:e2                                                                           {: RESULT = new DivOp(e1xleft, e1xright, e1, e2); :}
                        | Expr:e1 AND Expr:e2                                                                           {: RESULT = new AndOp(e1xleft, e1xright, e1, e2);:}
                        | Expr:e1 OR Expr:e2                                                                            {: RESULT = new OrOp(e1xleft, e1xright, e1, e2);:}
                        | Expr:e1 GT Expr:e2                                                                            {: RESULT = new GtOp(e1xleft, e1xright, e1, e2); :}
                        | Expr:e1 GE Expr:e2                                                                            {: RESULT = new GeOp(e1xleft, e1xright, e1, e2);:}
                        | Expr:e1 LT Expr:e2                                                                            {: RESULT = new LtOp(e1xleft, e1xright, e1, e2);:}
                        | Expr:e1 LE Expr:e2                                                                            {: RESULT = new LeOp(e1xleft, e1xright, e1, e2);:}
                        | Expr:e1 EQ Expr:e2                                                                            {: RESULT = new EqOp(e1xleft, e1xright, e1, e2);:}
                        | Expr:e1 NE Expr:e2                                                                            {: RESULT = new NeOp(e1xleft, e1xright, e1, e2);:}
                        | MINUS Expr:expr                                                                               {: RESULT = new UMinusExpression(exprxleft, exprxright,expr);:}
                        %prec UMINUS
                        | NOT Expr:expr                                                                                 {: RESULT = new NotExpression(exprxleft, exprxright, expr);:}
                        | SHARP Expr:expr                                                                               {: RESULT = new SharpExpression(exprxleft, exprxright, expr);:}
                        | error                                                                                         {: :}
                        ;